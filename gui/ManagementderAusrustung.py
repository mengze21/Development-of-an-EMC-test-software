# -*- coding: utf-8 -*-

# This script defines widgets and related windows of the "Gerätemanagement" window.

import sys
sys.path.append('gui')
from PyQt5 import QtCore, QtGui, QtWidgets
import cv2 as cv
import matplotlib.pyplot as plt
import time
import os

# This class defines the "Kabeldämpfung" window, which is used for importing and rewritting the cabel dampfungs.
# By the way, the "Kabeldämpfungen" can be visualized in diagramms, so that users could have more intuitive feelings on the data.
# It's Qt-Designer file is "Kabeldampfung.ui" in folder "uifiles"
class Ui_Kabel(object):

    _signal = QtCore.pyqtSignal(object, object, object, object)
    def setupUi(self, Kabel):
        Kabel.setObjectName("Kabel")
        Kabel.setWindowModality(QtCore.Qt.WindowModal)
        Kabel.resize(800, 631)
        Kabel.setMinimumSize(QtCore.QSize(800, 631))
        Kabel.setMaximumSize(QtCore.QSize(800, 631))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        Kabel.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon_materials/3.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Kabel.setWindowIcon(icon)
        Kabel.setModal(True)

        # initialization of the data
        self.KabelFrequentz1 = []
        self.KabelMagnitude1 = []
        self.KabelFrequentz2 = []
        self.KabelMagnitude2 = []

        self.Kabeldampfung1 = QtWidgets.QGroupBox(Kabel)
        self.Kabeldampfung1.setGeometry(QtCore.QRect(20, 20, 361, 561))
        self.Kabeldampfung1.setMinimumSize(QtCore.QSize(361, 561))
        self.Kabeldampfung1.setMaximumSize(QtCore.QSize(361, 561))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Kabeldampfung1.setFont(font)
        self.Kabeldampfung1.setLocale(QtCore.QLocale(QtCore.QLocale.German, QtCore.QLocale.Germany))
        self.Kabeldampfung1.setObjectName("Kabeldampfung1")

        self.UnitsEdit1 = QtWidgets.QComboBox(self.Kabeldampfung1)
        self.UnitsEdit1.setGeometry(QtCore.QRect(210, 70, 131, 28))
        self.UnitsEdit1.setMinimumSize(QtCore.QSize(131, 28))
        self.UnitsEdit1.setMaximumSize(QtCore.QSize(131, 28))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.UnitsEdit1.setFont(font)
        self.UnitsEdit1.setEditable(True)
        self.UnitsEdit1.setDuplicatesEnabled(False)
        self.UnitsEdit1.setObjectName("UnitsEdit1")
        self.UnitsEdit1.addItem("")

        self.Units1 = QtWidgets.QLabel(self.Kabeldampfung1)
        self.Units1.setGeometry(QtCore.QRect(20, 70, 131, 31))
        self.Units1.setMinimumSize(QtCore.QSize(91, 31))
        self.Units1.setMaximumSize(QtCore.QSize(1111, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Units1.setFont(font)
        self.Units1.setObjectName("Units1")

        self.DatumLabel1 = QtWidgets.QLabel(self.Kabeldampfung1)
        self.DatumLabel1.setGeometry(QtCore.QRect(20, 110, 81, 31))
        self.DatumLabel1.setMinimumSize(QtCore.QSize(81, 31))
        self.DatumLabel1.setMaximumSize(QtCore.QSize(81, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.DatumLabel1.setFont(font)
        self.DatumLabel1.setObjectName("DatumLabel1")

        self.FrequenzUnitsLabel1 = QtWidgets.QLabel(self.Kabeldampfung1)
        self.FrequenzUnitsLabel1.setGeometry(QtCore.QRect(20, 30, 151, 31))
        self.FrequenzUnitsLabel1.setMinimumSize(QtCore.QSize(151, 31))
        self.FrequenzUnitsLabel1.setMaximumSize(QtCore.QSize(151, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.FrequenzUnitsLabel1.setFont(font)
        self.FrequenzUnitsLabel1.setObjectName("FrequenzUnitsLabel1")

        self.MHzRadioButton1 = QtWidgets.QRadioButton(self.Kabeldampfung1)
        self.MHzRadioButton1.setGeometry(QtCore.QRect(290, 30, 71, 31))
        self.MHzRadioButton1.setMinimumSize(QtCore.QSize(71, 31))
        self.MHzRadioButton1.setMaximumSize(QtCore.QSize(71, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.MHzRadioButton1.setFont(font)
        self.MHzRadioButton1.setChecked(True)
        self.MHzRadioButton1.setObjectName("MHzRadioButton1")

        self.HzRadioButton1 = QtWidgets.QRadioButton(self.Kabeldampfung1)
        self.HzRadioButton1.setGeometry(QtCore.QRect(210, 30, 51, 31))
        self.HzRadioButton1.setMinimumSize(QtCore.QSize(51, 31))
        self.HzRadioButton1.setMaximumSize(QtCore.QSize(51, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.HzRadioButton1.setFont(font)
        self.HzRadioButton1.setChecked(False)
        self.HzRadioButton1.setObjectName("HzRadioButton1")

        self.DatumEdit1 = QtWidgets.QLineEdit(self.Kabeldampfung1)
        self.DatumEdit1.setGeometry(QtCore.QRect(210, 111, 131, 28))
        self.DatumEdit1.setMinimumSize(QtCore.QSize(131, 28))
        self.DatumEdit1.setMaximumSize(QtCore.QSize(131, 28))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.DatumEdit1.setFont(font)
        self.DatumEdit1.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.DatumEdit1.setText("")
        self.DatumEdit1.setAlignment(QtCore.Qt.AlignCenter)
        self.DatumEdit1.setReadOnly(True)
        self.DatumEdit1.setObjectName("DatumEdit1")

        self.FaktorQuelleLabel1 = QtWidgets.QLabel(self.Kabeldampfung1)
        self.FaktorQuelleLabel1.setGeometry(QtCore.QRect(20, 390, 321, 31*4))
        self.FaktorQuelleLabel1.setWordWrap(True)
        self.FaktorQuelleLabel1.setAlignment(QtCore.Qt.AlignTop)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.FaktorQuelleLabel1.setFont(font)
        self.FaktorQuelleLabel1.setObjectName("FaktorQuelleLabel1")
        self.FaktorQuelleLabel1.setStyleSheet("color:rgb({},{},{},255)".format(118, 113, 113))
        self.FaktorQuelleLabel1.hide()

        self.tableWidget1 = QtWidgets.QTableWidget(self.Kabeldampfung1)
        self.tableWidget1.setGeometry(QtCore.QRect(20, 160, 321, 231))
        self.tableWidget1.setMinimumSize(QtCore.QSize(321, 231))
        self.tableWidget1.setMaximumSize(QtCore.QSize(321, 231))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.tableWidget1.setFont(font)
        self.tableWidget1.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.tableWidget1.setShowGrid(True)
        self.tableWidget1.verticalHeader().setVisible(False)
        self.tableWidget1.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableWidget1.setObjectName("tableWidget1")
        self.tableWidget1.setColumnCount(2)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget1.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget1.setHorizontalHeaderItem(1, item)
        self.tableWidget1.horizontalHeader().setDefaultSectionSize(150)

        self.importParameter1 = QtWidgets.QToolButton(self.Kabeldampfung1)
        self.importParameter1.setGeometry(QtCore.QRect(50, 490, 51, 51))
        self.importParameter1.setMinimumSize(QtCore.QSize(51, 51))
        self.importParameter1.setMaximumSize(QtCore.QSize(51, 51))
        self.importParameter1.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icon_materials/13.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.importParameter1.setIcon(icon3)
        self.importParameter1.setIconSize(QtCore.QSize(51, 51))
        self.importParameter1.setAutoRaise(True)
        self.importParameter1.setObjectName("importParameter1")

        self.saveParameter1 = QtWidgets.QToolButton(self.Kabeldampfung1)
        self.saveParameter1.setGeometry(QtCore.QRect(155, 490, 51, 51))
        self.saveParameter1.setMinimumSize(QtCore.QSize(51, 51))
        self.saveParameter1.setMaximumSize(QtCore.QSize(51, 51))
        self.saveParameter1.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icon_materials/11.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.saveParameter1.setIcon(icon2)
        self.saveParameter1.setIconSize(QtCore.QSize(51, 51))
        self.saveParameter1.setAutoRaise(True)
        self.saveParameter1.setObjectName("saveParameter1")

        self.clearParameter1 = QtWidgets.QToolButton(self.Kabeldampfung1)
        self.clearParameter1.setGeometry(QtCore.QRect(260, 490, 51, 51))
        self.clearParameter1.setMinimumSize(QtCore.QSize(51, 51))
        self.clearParameter1.setMaximumSize(QtCore.QSize(51, 51))
        self.clearParameter1.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("icon_materials/12.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.clearParameter1.setIcon(icon4)
        self.clearParameter1.setIconSize(QtCore.QSize(51, 51))
        self.clearParameter1.setAutoRaise(True)
        self.clearParameter1.setObjectName("clearParameter1")

        self.drawline1 = QtWidgets.QToolButton(self.Kabeldampfung1)
        self.drawline1.setGeometry(QtCore.QRect(40, 440, 281, 31))
        self.drawline1.setText("")
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.drawline1.setFont(font)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("./icon_materials/32.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.drawline1.setIcon(icon5)
        self.drawline1.setIconSize(QtCore.QSize(41, 41))
        self.drawline1.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        self.drawline1.setAutoRaise(True)
        self.drawline1.setStyleSheet("color:rgb({},{},{},255)".format(92, 174, 219))
        self.drawline1.setObjectName("drawline1")
        self.drawline1.setEnabled(False)

        self.Kabeldampfung2 = QtWidgets.QGroupBox(Kabel)
        self.Kabeldampfung2.setGeometry(QtCore.QRect(420, 20, 361, 561))
        self.Kabeldampfung2.setMinimumSize(QtCore.QSize(361, 561))
        self.Kabeldampfung2.setMaximumSize(QtCore.QSize(361, 561))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Kabeldampfung2.setFont(font)
        self.Kabeldampfung2.setLocale(QtCore.QLocale(QtCore.QLocale.German, QtCore.QLocale.Germany))
        self.Kabeldampfung2.setObjectName("Kabeldampfung2")

        self.UnitsEdit2 = QtWidgets.QComboBox(self.Kabeldampfung2)
        self.UnitsEdit2.setGeometry(QtCore.QRect(210, 70, 131, 28))
        self.UnitsEdit2.setMinimumSize(QtCore.QSize(131, 28))
        self.UnitsEdit2.setMaximumSize(QtCore.QSize(131, 28))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.UnitsEdit2.setFont(font)
        self.UnitsEdit2.setEditable(True)
        self.UnitsEdit2.setDuplicatesEnabled(False)
        self.UnitsEdit2.setObjectName("UnitsEdit2")
        self.UnitsEdit2.addItem("")

        self.Units2 = QtWidgets.QLabel(self.Kabeldampfung2)
        self.Units2.setGeometry(QtCore.QRect(20, 70, 131, 31))
        self.Units2.setMinimumSize(QtCore.QSize(91, 31))
        self.Units2.setMaximumSize(QtCore.QSize(1111, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Units2.setFont(font)
        self.Units2.setObjectName("Units2")

        self.DatumLabel2 = QtWidgets.QLabel(self.Kabeldampfung2)
        self.DatumLabel2.setGeometry(QtCore.QRect(20, 110, 81, 31))
        self.DatumLabel2.setMinimumSize(QtCore.QSize(81, 31))
        self.DatumLabel2.setMaximumSize(QtCore.QSize(81, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.DatumLabel2.setFont(font)
        self.DatumLabel2.setObjectName("DatumLabel2")

        self.FrequenzUnitsLabel2 = QtWidgets.QLabel(self.Kabeldampfung2)
        self.FrequenzUnitsLabel2.setGeometry(QtCore.QRect(20, 30, 151, 31))
        self.FrequenzUnitsLabel2.setMinimumSize(QtCore.QSize(151, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.FrequenzUnitsLabel2.setFont(font)
        self.FrequenzUnitsLabel2.setObjectName("FrequenzUnitsLabel2")

        self.MHzRadioButton2 = QtWidgets.QRadioButton(self.Kabeldampfung2)
        self.MHzRadioButton2.setGeometry(QtCore.QRect(290, 30, 71, 31))
        self.MHzRadioButton2.setMinimumSize(QtCore.QSize(71, 31))
        self.MHzRadioButton2.setMaximumSize(QtCore.QSize(71, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.MHzRadioButton2.setFont(font)
        self.MHzRadioButton2.setChecked(True)
        self.MHzRadioButton2.setObjectName("MHzRadioButton2")

        self.HzRadioButton2 = QtWidgets.QRadioButton(self.Kabeldampfung2)
        self.HzRadioButton2.setGeometry(QtCore.QRect(210, 30, 51, 31))
        self.HzRadioButton2.setMinimumSize(QtCore.QSize(51, 31))
        self.HzRadioButton2.setMaximumSize(QtCore.QSize(51, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.HzRadioButton2.setFont(font)
        self.HzRadioButton2.setChecked(False)
        self.HzRadioButton2.setObjectName("HzRadioButton2")

        self.DatumEdit2 = QtWidgets.QLineEdit(self.Kabeldampfung2)
        self.DatumEdit2.setGeometry(QtCore.QRect(210, 111, 131, 28))
        self.DatumEdit2.setMinimumSize(QtCore.QSize(131, 28))
        self.DatumEdit2.setMaximumSize(QtCore.QSize(131, 28))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.DatumEdit2.setFont(font)
        self.DatumEdit2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.DatumEdit2.setText("")
        self.DatumEdit2.setAlignment(QtCore.Qt.AlignCenter)
        self.DatumEdit2.setReadOnly(True)
        self.DatumEdit2.setObjectName("DatumEdit2")

        self.FaktorQuelleLabel2 = QtWidgets.QLabel(self.Kabeldampfung2)
        self.FaktorQuelleLabel2.setGeometry(QtCore.QRect(20, 390, 321, 31*4))
        self.FaktorQuelleLabel2.setWordWrap(True)
        self.FaktorQuelleLabel2.setAlignment(QtCore.Qt.AlignTop)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.FaktorQuelleLabel2.setFont(font)
        self.FaktorQuelleLabel2.setObjectName("FaktorQuelleLabel2")
        self.FaktorQuelleLabel2.setStyleSheet("color:rgb({},{},{},255)".format(118, 113, 113))
        self.FaktorQuelleLabel2.hide()

        self.tableWidget2 = QtWidgets.QTableWidget(self.Kabeldampfung2)
        self.tableWidget2.setGeometry(QtCore.QRect(20, 160, 321, 231))
        self.tableWidget2.setMinimumSize(QtCore.QSize(321, 231))
        self.tableWidget2.setMaximumSize(QtCore.QSize(321, 231))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.tableWidget2.setFont(font)
        self.tableWidget2.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.tableWidget2.setShowGrid(True)
        self.tableWidget2.verticalHeader().setVisible(False)
        self.tableWidget2.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableWidget2.setObjectName("tableWidget2")
        self.tableWidget2.setColumnCount(2)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget2.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget2.setHorizontalHeaderItem(1, item)
        self.tableWidget2.horizontalHeader().setDefaultSectionSize(150)

        self.importParameter2 = QtWidgets.QToolButton(self.Kabeldampfung2)
        self.importParameter2.setGeometry(QtCore.QRect(50, 490, 51, 51))
        self.importParameter2.setMinimumSize(QtCore.QSize(51, 51))
        self.importParameter2.setMaximumSize(QtCore.QSize(51, 51))
        self.importParameter2.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icon_materials/13.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.importParameter2.setIcon(icon3)
        self.importParameter2.setIconSize(QtCore.QSize(51, 51))
        self.importParameter2.setAutoRaise(True)
        self.importParameter2.setObjectName("importParameter2")

        self.saveParameter2 = QtWidgets.QToolButton(self.Kabeldampfung2)
        self.saveParameter2.setGeometry(QtCore.QRect(165, 490, 51, 51))
        self.saveParameter2.setMinimumSize(QtCore.QSize(51, 51))
        self.saveParameter2.setMaximumSize(QtCore.QSize(51, 51))
        self.saveParameter2.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icon_materials/11.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.saveParameter2.setIcon(icon2)
        self.saveParameter2.setIconSize(QtCore.QSize(51, 51))
        self.saveParameter2.setAutoRaise(True)
        self.saveParameter2.setObjectName("saveParameter2")

        self.clearParameter2 = QtWidgets.QToolButton(self.Kabeldampfung2)
        self.clearParameter2.setGeometry(QtCore.QRect(270, 490, 51, 51))
        self.clearParameter2.setMinimumSize(QtCore.QSize(51, 51))
        self.clearParameter2.setMaximumSize(QtCore.QSize(51, 51))
        self.clearParameter2.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("icon_materials/12.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.clearParameter2.setIcon(icon4)
        self.clearParameter2.setIconSize(QtCore.QSize(51, 51))
        self.clearParameter2.setAutoRaise(True)
        self.clearParameter2.setObjectName("clearParameter2")


        self.drawline2 = QtWidgets.QToolButton(self.Kabeldampfung2)
        self.drawline2.setGeometry(QtCore.QRect(40, 440, 281, 31))
        self.drawline2.setMaximumSize(QtCore.QSize(281,31))
        self.drawline2.setMinimumSize(QtCore.QSize(281,31))
        self.drawline2.setText("")
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.drawline2.setFont(font)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("./icon_materials/32.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.drawline2.setIcon(icon5)
        self.drawline2.setIconSize(QtCore.QSize(41, 41))
        self.drawline2.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        self.drawline2.setAutoRaise(True)
        self.drawline2.setStyleSheet("color:rgb({},{},{},255)".format(92, 174, 219))
        self.drawline2.setObjectName("drawline2")

        self.line = QtWidgets.QFrame(Kabel)
        self.line.setGeometry(QtCore.QRect(390, 0, 20, 601))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")

        self.ApplyButton = QtWidgets.QPushButton(Kabel)
        self.ApplyButton.setGeometry(QtCore.QRect(520, 590, 121, 31))
        self.ApplyButton.setMinimumSize(QtCore.QSize(121, 31))
        self.ApplyButton.setMaximumSize(QtCore.QSize(121, 31))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        self.ApplyButton.setFont(font)
        self.ApplyButton.setDefault(True)
        self.ApplyButton.setObjectName("ApplyButton")

        self.CancelButton = QtWidgets.QPushButton(Kabel)
        self.CancelButton.setGeometry(QtCore.QRect(660, 590, 121, 31))
        self.CancelButton.setMinimumSize(QtCore.QSize(121, 31))
        self.CancelButton.setMaximumSize(QtCore.QSize(121, 31))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        self.CancelButton.setFont(font)
        self.CancelButton.setObjectName("CancelButton")

        self.retranslateUi(Kabel)
        QtCore.QMetaObject.connectSlotsByName(Kabel)

        # default cable data
        # import default data of Kabel 1 and put them into the table 1
        # annotate the source of the data
        # annotate the creation time of the data
        self.fname1 = "./data/LMK11.TXT"
        quelle1 = os.path.abspath(self.fname1)
        aFile1 = open(self.fname1, 'r')
        date1 = get_FileCreateTime(self.fname1)
        self.DatumEdit1.setText(date1)
        allLine1 = aFile1.readlines()
        aFile1.close()
        rowCnt1 = len(allLine1)
        self.tableWidget1.setRowCount(rowCnt1)
        vectF1 = [0] * rowCnt1
        vectMag1 = [0] * rowCnt1
        for i1 in range(len(allLine1)):
            lineText1 = allLine1[i1].strip()
            strList1 = lineText1.split()
            if self.HzRadioButton1.isChecked():
                vectF1[i1] = float(strList1[0].replace(",","."))
                self.tableWidget1.horizontalHeaderItem(0).setText('Frequenz (Hz)')
                self.MHzRadioButton1.setEnabled(False)
            if self.MHzRadioButton1.isChecked():
                vectF1[i1] = float(strList1[0].replace(",",".")) / 1000000.0
                self.tableWidget1.horizontalHeaderItem(0).setText('Frequenz (MHz)')
                self.HzRadioButton1.setEnabled(False)
            vectMag1[i1] = float(strList1[1].replace(",","."))
            if i1 == rowCnt1 - 1:
                break
        self.KabelFrequentz1 = vectF1
        self.KabelMagnitude1 = vectMag1
        self.FaktorQuelleLabel1.show()
        self.FaktorQuelleLabel1.setText("Quelle: %s" % quelle1.replace("\\", "/"))
        self.drawline1.setEnabled(True)
        for x1 in range(rowCnt1):
            item_f1 = QtWidgets.QTableWidgetItem('%s' % vectF1[x1])
            item_m1 = QtWidgets.QTableWidgetItem('%s' % vectMag1[x1])
            self.tableWidget1.setItem(x1, 0, item_f1)
            self.tableWidget1.setItem(x1, 1, item_m1)

        # default cable data
        # import default data of Kabel 2 and put them into the table 2
        # annotate the source of the data
        # annotate the creation time of the data
        self.fname2 = "./data/LMK12.TXT"
        quelle2 = os.path.abspath(self.fname2)
        aFile2 = open(self.fname2, 'r')
        date2 = get_FileCreateTime(self.fname2)
        self.DatumEdit2.setText(date2)
        allLine2 = aFile2.readlines()
        aFile2.close()
        rowCnt2 = len(allLine2)
        self.tableWidget2.setRowCount(rowCnt2)
        vectF2 = [0] * rowCnt2
        vectMag2 = [0] * rowCnt2
        for i2 in range(len(allLine2)):
            lineText2 = allLine2[i2].strip()
            strList2 = lineText2.split()
            if self.HzRadioButton2.isChecked():
                vectF2[i2] = float(strList2[0].replace(",", "."))
                self.tableWidget2.horizontalHeaderItem(0).setText('Frequenz (Hz)')
                self.MHzRadioButton2.setEnabled(False)
            if self.MHzRadioButton2.isChecked():
                vectF2[i2] = float(strList2[0].replace(",", ".")) / 1000000.0
                self.tableWidget2.horizontalHeaderItem(0).setText('Frequenz (MHz)')
                self.HzRadioButton2.setEnabled(False)
            vectMag2[i2] = float(strList2[1].replace(",", "."))
            if i2 == rowCnt2 - 1:
                break
        self.KabelFrequentz2 = vectF2
        self.KabelMagnitude2 = vectMag2
        self.FaktorQuelleLabel2.show()
        self.FaktorQuelleLabel2.setText("Quelle: %s" % quelle2.replace("\\", "/"))
        self.drawline2.setEnabled(True)
        for x2 in range(rowCnt2):
            item_f2 = QtWidgets.QTableWidgetItem('%s' % vectF2[x2])
            item_m2 = QtWidgets.QTableWidgetItem('%s' % vectMag2[x2])
            self.tableWidget2.setItem(x2, 0, item_f2)
            self.tableWidget2.setItem(x2, 1, item_m2)

        # define signals
        self.MHzRadioButton1.clicked.connect(self.header_switch_MHz1)
        self.MHzRadioButton2.clicked.connect(self.header_switch_MHz2)
        self.HzRadioButton1.clicked.connect(self.header_switch_Hz1)
        self.HzRadioButton2.clicked.connect(self.header_switch_Hz2)
        self.drawline1.clicked.connect(self.diagramm_drawed_one)
        self.drawline2.clicked.connect(self.diagramm_drawed_two)
        self.importParameter1.clicked.connect(self.openfile_for_one)
        self.importParameter2.clicked.connect(self.openfile_for_two)
        self.saveParameter1.clicked.connect(self.savefile_one)
        self.saveParameter2.clicked.connect(self.savefile_two)
        self.clearParameter1.clicked.connect(self.clear_factortable_one)
        self.clearParameter2.clicked.connect(self.clear_factortable_two)
        self.CancelButton.clicked.connect(Kabel.close)
        self.ApplyButton.clicked.connect(self.slot1)

        # define the background color of this window
        pale = QtGui.QPalette()
        pale.setColor(QtGui.QPalette.Background, QtGui.QColor(248, 248, 248))
        Kabel.setPalette(pale)

    def retranslateUi(self, Kabel):
        _translate = QtCore.QCoreApplication.translate
        Kabel.setWindowTitle(_translate("Kabel", "Kabeldämpfungen"))
        self.Kabeldampfung1.setTitle(_translate("Kabel", "Kabeldämpfung 1"))
        self.UnitsEdit1.setItemText(0, _translate("Kabel", "dBμV/m"))
        self.Units1.setText(_translate("Kabel", "Dämpfungeinheit:"))
        self.clearParameter1.setToolTip(_translate("Kabel", "Löschen Sie die Korrekturtabelle."))
        self.clearParameter2.setToolTip(_translate("Kabel", "Löschen Sie die Korrekturtabelle."))
        self.saveParameter1.setToolTip(_translate("Kabel",
                                                 "Speichern Sie die Korrekturtabelle in einer durch Tabulatoren getrennten Textdatei."))
        self.saveParameter2.setToolTip(_translate("Kabel",
                                                 "Speichern Sie die Korrekturtabelle in einer durch Tabulatoren getrennten Textdatei."))
        self.importParameter1.setToolTip(_translate("Kabel",
                                                   "Importieren Sie die Korrekturtabelle aus einer durch Tabulatoren getrennten Textdatei."))
        self.importParameter2.setToolTip(_translate("Kabel",
                                                   "Importieren Sie die Korrekturtabelle aus einer durch Tabulatoren getrennten Textdatei."))
        self.DatumLabel1.setText(_translate("Kabel", "Datum:"))
        self.FrequenzUnitsLabel1.setText(_translate("Kabel", "Frequenzeinheit:"))
        self.MHzRadioButton1.setText(_translate("Kabel", "MHz"))
        self.HzRadioButton1.setText(_translate("Kabel", "Hz"))
        self.DatumEdit1.setPlaceholderText(_translate("Kabel", "DD.MM.YYYY"))
        self.FaktorQuelleLabel1.setText(_translate("Kabel", "Quelle:"))
        self.Kabeldampfung2.setTitle(_translate("Kabel", "Kabeldämpfung 2"))
        self.UnitsEdit2.setItemText(0, _translate("Kabel", "dBμV/m"))
        self.Units2.setText(_translate("Kabel", "Dämpfungeinheit:"))
        self.DatumLabel2.setText(_translate("Kabel", "Datum:"))
        self.FrequenzUnitsLabel2.setText(_translate("Kabel", "Frequenzeinheit:"))
        self.MHzRadioButton2.setText(_translate("Kabel", "MHz"))
        self.HzRadioButton2.setText(_translate("Kabel", "Hz"))
        self.DatumEdit2.setPlaceholderText(_translate("Kabel", "DD.MM.YYYY"))
        self.FaktorQuelleLabel2.setText(_translate("Kabel", "Quelle:"))
        if self.MHzRadioButton1.isChecked():
            item = self.tableWidget1.horizontalHeaderItem(0)
            item.setText(_translate("Kabel", "Frequenz (MHz)"))
        if self.HzRadioButton1.isChecked():
            item = self.tableWidget1.horizontalHeaderItem(0)
            item.setText(_translate("Kabel", "Frequenz (Hz)"))
        item = self.tableWidget1.horizontalHeaderItem(1)
        item.setText(_translate("Kabel", "Faktor (dBμV/m)"))
        if self.MHzRadioButton2.isChecked():
            item = self.tableWidget2.horizontalHeaderItem(0)
            item.setText(_translate("Kabel", "Frequenz (MHz)"))
        if self.HzRadioButton2.isChecked():
            item = self.tableWidget2.horizontalHeaderItem(0)
            item.setText(_translate("Kabel", "Frequenz (Hz)"))
        item = self.tableWidget2.horizontalHeaderItem(1)
        item.setText(_translate("Kabel", "Faktor (dBμV/m)"))
        self.drawline1.setText(_translate("Kabel", "Diagramm der Kabeldämpfung 1"))
        self.drawline2.setText(_translate("Kabel", "Diagramm der Kabeldämpfung 2"))
        self.ApplyButton.setText(_translate("Kabel", "Anwenden"))
        self.CancelButton.setText(_translate("Kabel", "Zurück"))

    # confirmation of applying the cable data
    def slot1(self):
        messageBox = QtWidgets.QMessageBox()
        messageBox.setWindowTitle('Hinweis')
        messageBox.setIcon(QtWidgets.QMessageBox.Information)
        messageBox.setWindowIcon(QtGui.QIcon('./icon_materials/3.png'))
        messageBox.setText('Die Parameters werden erfolgreich angewendet!')
        messageBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
        buttonY = messageBox.button(QtWidgets.QMessageBox.Ok)
        buttonY.setText('Ok')
        messageBox.exec_()

    # change the unit of the 1. cable data to MHz
    def header_switch_MHz1(self):
        self.tableWidget1.horizontalHeaderItem(0).setText('Frequenz (MHz)')

    # change the unit of the 2. cable data to MHz
    def header_switch_MHz2(self):
        self.tableWidget2.horizontalHeaderItem(0).setText('Frequenz (MHz)')

    # change the unit of the 1. cable data to Hz
    def header_switch_Hz1(self):
        self.tableWidget1.horizontalHeaderItem(0).setText('Frequenz (Hz)')

    # change the unit of the 2. cable data to Hz
    def header_switch_Hz2(self):
        self.tableWidget2.horizontalHeaderItem(0).setText('Frequenz (Hz)')

    # import new cable data
    # import new data of Kabel 1 and put them into the table 1
    # annotate the source of the data
    # annotate the creation time of the data
    def openfile_for_one(self):
        if self.tableWidget1.rowCount() == 0:
            curPath = QtCore.QDir.currentPath()
            fname, flt = QtWidgets.QFileDialog.getOpenFileName(None,'Parameter importieren', curPath, 'Parameterdateien (*.txt)')
            if (fname == ""):
                return
            aFile = open(fname, 'r')
            quelle = os.path.abspath(fname)
            date = get_FileCreateTime(fname)
            self.DatumEdit1.setText(date)
            allLine = aFile.readlines()
            aFile.close()
            fileInfo = QtCore.QFileInfo(fname)
            QtCore.QDir.setCurrent(fileInfo.absolutePath())

            rowCnt = len(allLine)
            self.tableWidget1.setRowCount(rowCnt)
            vectF = [0] * rowCnt
            vectMag = [0] * rowCnt
            for i in range(len(allLine)):
                lineText = allLine[i].strip()
                strList = lineText.split()
                if self.HzRadioButton1.isChecked():
                    vectF[i] = float(strList[0].replace(",","."))
                    self.MHzRadioButton1.setEnabled(False)
                    self.tableWidget1.horizontalHeaderItem(0).setText('Frequenz (Hz)')
                else:
                    vectF[i] = float(strList[0].replace(",","."))/1000000.0
                    self.HzRadioButton1.setEnabled(False)
                    self.tableWidget1.horizontalHeaderItem(0).setText('Frequenz (MHz)')
                vectMag[i] = float(strList[1].replace(",","."))
                if i == rowCnt - 1:
                    break
            self.KabelFrequentz1 = vectF
            self.KabelMagnitude1 = vectMag
            self.FaktorQuelleLabel1.show()
            self.FaktorQuelleLabel1.setText("Quelle: %s" % quelle.replace("\\", "/"))
            self.drawline1.setEnabled(True)
            for x in range(rowCnt):
                item_f = QtWidgets.QTableWidgetItem('%s' % vectF[x])
                item_m = QtWidgets.QTableWidgetItem('%s' % vectMag[x])
                self.tableWidget1.setItem(x, 0, item_f)
                self.tableWidget1.setItem(x, 1, item_m)
        # before importing new data, make sure that there is no data left in the table 1, otherwiese a
        # warning messageBox appears and tells users: You must clear the current table 1.
        # Then you are allowed to import new data into it.
        else:
            messageBox = QtWidgets.QMessageBox()
            messageBox.setWindowTitle('Warnung')
            messageBox.setIcon(QtWidgets.QMessageBox.Warning)
            messageBox.setWindowIcon(QtGui.QIcon('./icon_materials/3.png'))
            messageBox.setText('Bitte löschen Sie zuerst die aktuelle Tabelle!')
            messageBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
            buttonY = messageBox.button(QtWidgets.QMessageBox.Ok)
            buttonY.setText('Ok')
            messageBox.exec_()

    # import new cable data
    # import new data of Kabel 2 and put them into the table 2
    # annotate the source of the data
    # annotate the creation time of the data
    def openfile_for_two(self):
        if self.tableWidget2.rowCount() == 0:
            curPath = QtCore.QDir.currentPath()
            fname, flt = QtWidgets.QFileDialog.getOpenFileName(None,'Parameter importieren', curPath, 'Parameterdateien (*.txt)')
            if (fname == ""):
                return
            aFile = open(fname, 'r')
            quelle = os.path.abspath(fname)
            date = get_FileCreateTime(fname)
            self.DatumEdit2.setText(date)
            allLine = aFile.readlines()
            aFile.close()
            fileInfo = QtCore.QFileInfo(fname)
            QtCore.QDir.setCurrent(fileInfo.absolutePath())
            rowCnt = len(allLine)
            self.tableWidget2.setRowCount(rowCnt)
            vectF = [0] * rowCnt
            vectMag = [0] * rowCnt
            for i in range(len(allLine)):
                lineText = allLine[i].strip()
                strList = lineText.split()
                if self.HzRadioButton2.isChecked():
                    vectF[i] = float(strList[0].replace(",","."))
                    self.MHzRadioButton2.setEnabled(False)
                    self.tableWidget2.horizontalHeaderItem(0).setText('Frequenz (Hz)')
                else:
                    vectF[i] = float(strList[0].replace(",","."))/1000000.0
                    self.HzRadioButton2.setEnabled(False)
                    self.tableWidget2.horizontalHeaderItem(0).setText('Frequenz (MHz)')
                vectMag[i] = float(strList[1].replace(",","."))
                if i == rowCnt - 1:
                    break
            self.KabelFrequentz2 = vectF
            self.KabelMagnitude2 = vectMag
            self.FaktorQuelleLabel2.show()
            self.FaktorQuelleLabel2.setText("Quelle: %s" % quelle.replace("\\", "/"))
            self.drawline2.setEnabled(True)
            for x in range(rowCnt):
                item_f = QtWidgets.QTableWidgetItem('%s' % vectF[x])
                item_m = QtWidgets.QTableWidgetItem('%s' % vectMag[x])
                self.tableWidget2.setItem(x, 0, item_f)
                self.tableWidget2.setItem(x, 1, item_m)
        # before importing new data, make sure that there is no data left in the table 2, otherwiese a
        # warning messageBox appears and tells users: You must clear the current table 2.
        # Then you are allowed to import new data into it.
        else:
            messageBox = QtWidgets.QMessageBox()
            messageBox.setWindowTitle('Warnung')
            messageBox.setIcon(QtWidgets.QMessageBox.Warning)
            messageBox.setWindowIcon(QtGui.QIcon('./icon_materials/3.png'))
            messageBox.setText('Bitte löschen Sie zuerst die aktuelle Tabelle!')
            messageBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
            buttonY = messageBox.button(QtWidgets.QMessageBox.Ok)
            buttonY.setText('Ok')
            messageBox.exec_()

    # save the cable data from the table 1 into a .txt file
    def savefile_one(self):
        if self.tableWidget1.rowCount() == 0:
            messageBox = QtWidgets.QMessageBox()
            messageBox.setWindowTitle('Warnung')
            messageBox.setIcon(QtWidgets.QMessageBox.Warning)
            messageBox.setWindowIcon(QtGui.QIcon('./icon_materials/3.png'))
            messageBox.setText('Keine Daten sind vorhanden!')
            messageBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
            buttonY = messageBox.button(QtWidgets.QMessageBox.Ok)
            buttonY.setText('Ok')
            messageBox.exec_()
        else:
            fileName, _ = QtWidgets.QFileDialog.getSaveFileName(None, 'Parameter speichern', 'd:\\',
                                                                'Parameterdateien (*.txt)')
            f = open(fileName, "a")
            for x in range(self.tableWidget1.rowCount()):
                frequenz = self.tableWidget1.item(x, 0).text()
                f.write(frequenz)
                f.write('\t')
                magnitude = self.tableWidget1.item(x, 1).text()
                f.write(magnitude)
                f.write('\n')
            messageBox = QtWidgets.QMessageBox()
            messageBox.setWindowTitle('Hinweis')
            messageBox.setIcon(QtWidgets.QMessageBox.Information)
            messageBox.setWindowIcon(QtGui.QIcon('./icon_materials/3.png'))
            messageBox.setText('Die Daten werden erfolgreich exportiert!')
            messageBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
            buttonY = messageBox.button(QtWidgets.QMessageBox.Ok)
            buttonY.setText('Ok')
            messageBox.exec_()

    # save the cable data from the table 2
    def savefile_two(self):
        if self.tableWidget2.rowCount() == 0:
            messageBox = QtWidgets.QMessageBox()
            messageBox.setWindowTitle('Warnung')
            messageBox.setIcon(QtWidgets.QMessageBox.Warning)
            messageBox.setWindowIcon(QtGui.QIcon('./icon_materials/3.png'))
            messageBox.setText('Keine Daten sind vorhanden!')
            messageBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
            buttonY = messageBox.button(QtWidgets.QMessageBox.Ok)
            buttonY.setText('Ok')
            messageBox.exec_()
        else:
            fileName, _ = QtWidgets.QFileDialog.getSaveFileName(None, 'Parameter speichern', 'd:\\',
                                                                'Parameterdateien (*.txt)')
            f = open(fileName, "a")
            for x in range(self.tableWidget2.rowCount()):
                frequenz = self.tableWidget2.item(x, 0).text()
                f.write(frequenz)
                f.write('\t')
                magnitude = self.tableWidget2.item(x, 1).text()
                f.write(magnitude)
                f.write('\n')
            messageBox = QtWidgets.QMessageBox()
            messageBox.setWindowTitle('Hinweis')
            messageBox.setIcon(QtWidgets.QMessageBox.Information)
            messageBox.setWindowIcon(QtGui.QIcon('./icon_materials/3.png'))
            messageBox.setText('Die Daten werden erfolgreich exportiert!')
            messageBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
            buttonY = messageBox.button(QtWidgets.QMessageBox.Ok)
            buttonY.setText('Ok')
            messageBox.exec_()

    # clear all data from table 1
    def clear_factortable_one(self):
        self.tableWidget1.clearContents()
        self.tableWidget1.setRowCount(0)
        self.drawline1.setEnabled(False)
        self.DatumEdit1.clear()
        self.HzRadioButton1.setEnabled(True)
        self.MHzRadioButton1.setEnabled(True)
        self.FaktorQuelleLabel1.setText('')
        self.FaktorQuelleLabel1.hide()
        if self.MHzRadioButton1.isChecked():
            self.tableWidget1.horizontalHeaderItem(0).setText('Frequenz (MHz)')
        else:
            self.tableWidget1.horizontalHeaderItem(0).setText('Frequenz (Hz)')

    # clear all data from table 2
    def clear_factortable_two(self):
        self.tableWidget2.clearContents()
        self.tableWidget2.setRowCount(0)
        self.drawline2.setEnabled(False)
        self.DatumEdit2.clear()
        self.HzRadioButton2.setEnabled(True)
        self.MHzRadioButton2.setEnabled(True)
        self.FaktorQuelleLabel2.setText('')
        self.FaktorQuelleLabel2.hide()
        if self.MHzRadioButton2.isChecked():
            self.tableWidget2.horizontalHeaderItem(0).setText('Frequenz (MHz)')
        else:
            self.tableWidget2.horizontalHeaderItem(0).setText('Frequenz (Hz)')

    # visualization of the data from table 1
    def diagramm_drawed_one(self):
        if self.MHzRadioButton1.isChecked():
            plt.semilogx(self.KabelFrequentz1, self.KabelMagnitude1, linewidth=2)
            plt.gcf().canvas.set_window_title('Diagramm der Kabeldämpfung 1')
            plt.xlabel("Frequenz in MHz", fontsize=12)
            plt.ylabel("Magnitude in dBμV/m", fontsize=12)
            plt.grid(True, which="both", ls='--')
            plt.tick_params(direction='inout')
            plt.xlim(xmin=0.009, xmax=4000)
            plt.ylim(ymin=-5, ymax=1)
            plt.show()
        if self.HzRadioButton1.isChecked():
            plt.semilogx(self.KabelFrequentz1, self.KabelMagnitude1, linewidth=2)
            plt.gcf().canvas.set_window_title('Diagramm der Kabeldämpfung 1')
            plt.xlabel("Frequenz in Hz", fontsize=12)
            plt.ylabel("Magnitude in dBμV/m", fontsize=12)
            plt.grid(True, which="both", ls='--')
            plt.tick_params(direction='inout')
            plt.xlim(xmin=9000, xmax=4000000000)
            plt.ylim(ymin=-5, ymax=1)
            plt.show()

    # visualization of the data from table 2
    def diagramm_drawed_two(self):
        if self.MHzRadioButton2.isChecked():
            plt.semilogx(self.KabelFrequentz2, self.KabelMagnitude2, linewidth=2)
            plt.gcf().canvas.set_window_title('Diagramm der Kabeldämpfung 2')
            plt.xlabel("Frequenz in MHz", fontsize=12)
            plt.ylabel("Magnitude in dBμV/m", fontsize=12)
            plt.grid(True, which="both", ls='--')
            plt.tick_params(direction='inout')
            plt.xlim(xmin=0.009, xmax=4000)
            plt.ylim(ymin=-5, ymax=1)
            plt.show()
        if self.HzRadioButton2.isChecked():
            plt.semilogx(self.KabelFrequentz2, self.KabelMagnitude2, linewidth=2)
            plt.gcf().canvas.set_window_title('Diagramm der Kabeldämpfung 2')
            plt.xlabel("Frequenz in Hz", fontsize=12)
            plt.ylabel("Magnitude in dBμV/m", fontsize=12)
            plt.grid(True, which="both", ls='--')
            plt.tick_params(direction='inout')
            plt.xlim(xmin=9000, xmax=4000000000)
            plt.ylim(ymin=-5, ymax=1)
            plt.show()

# This class defines the "Antenne bearbeiten" window, which is used for importing and rewritting the antenne factors.
# By the way, the "Antennenfaktoren" can be visualized in a diagramm, so that users could have more intuitive feelings on the data.
# It's Qt-Designer file is "AntenneBearbeiten.ui" in folder "uifiles"
class Ui_EditAntenne(object):
    def setupUi(self, EditAntenne):
        EditAntenne.setObjectName("EditAntenne")
        EditAntenne.setWindowModality(QtCore.Qt.WindowModal)
        EditAntenne.resize(1280, 720)
        EditAntenne.setMinimumSize(QtCore.QSize(1280, 720))
        EditAntenne.setMaximumSize(QtCore.QSize(1280, 720))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        EditAntenne.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon_materials/3.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        EditAntenne.setWindowIcon(icon)
        EditAntenne.setModal(True)

        # initialization of the "Antennenfaktoren"
        self.AntenneFrequentz = []
        self.AntenneMagnitude = []

        self.Information = QtWidgets.QGroupBox(EditAntenne)
        self.Information.setEnabled(True)
        self.Information.setGeometry(QtCore.QRect(670, 30, 570, 221))
        self.Information.setMinimumSize(QtCore.QSize(570, 221))
        self.Information.setMaximumSize(QtCore.QSize(570, 221))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Information.setFont(font)
        self.Information.setCheckable(False)
        self.Information.setObjectName("Information")

        self.Seriell = QtWidgets.QLabel(self.Information)
        self.Seriell.setGeometry(QtCore.QRect(20, 80, 61, 28))
        self.Seriell.setMinimumSize(QtCore.QSize(61, 28))
        self.Seriell.setMaximumSize(QtCore.QSize(61, 28))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Seriell.setFont(font)
        self.Seriell.setObjectName("Seriell")

        self.Modell = QtWidgets.QLabel(self.Information)
        self.Modell.setGeometry(QtCore.QRect(20, 40, 71, 28))
        self.Modell.setMinimumSize(QtCore.QSize(71, 28))
        self.Modell.setMaximumSize(QtCore.QSize(71, 28))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Modell.setFont(font)
        self.Modell.setObjectName("Modell")

        self.Beschreibung = QtWidgets.QLabel(self.Information)
        self.Beschreibung.setGeometry(QtCore.QRect(20, 140, 131, 28))
        self.Beschreibung.setMinimumSize(QtCore.QSize(131, 28))
        self.Beschreibung.setMaximumSize(QtCore.QSize(131, 28))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Beschreibung.setFont(font)
        self.Beschreibung.setObjectName("Beschreibung")

        self.ModellEdit = QtWidgets.QLineEdit(self.Information)
        self.ModellEdit.setGeometry(QtCore.QRect(170, 40, 381, 28))
        self.ModellEdit.setMinimumSize(QtCore.QSize(381, 28))
        self.ModellEdit.setMaximumSize(QtCore.QSize(381, 28))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.ModellEdit.setFont(font)
        self.ModellEdit.setObjectName("ModellEdit")

        self.SeriellEdit = QtWidgets.QLineEdit(self.Information)
        self.SeriellEdit.setGeometry(QtCore.QRect(170, 80, 381, 28))
        self.SeriellEdit.setMinimumSize(QtCore.QSize(381, 28))
        self.SeriellEdit.setMaximumSize(QtCore.QSize(381, 28))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.SeriellEdit.setFont(font)
        self.SeriellEdit.setObjectName("SeriellEdit")

        self.BeschreibungEdit = QtWidgets.QTextEdit(self.Information)
        self.BeschreibungEdit.setGeometry(QtCore.QRect(170, 120, 381, 81))
        self.BeschreibungEdit.setMinimumSize(QtCore.QSize(381, 81))
        self.BeschreibungEdit.setMaximumSize(QtCore.QSize(381, 81))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.BeschreibungEdit.setFont(font)
        self.BeschreibungEdit.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.BeschreibungEdit.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.BeschreibungEdit.setObjectName("BeschreibungEdit")

        self.Kalibrierung = QtWidgets.QGroupBox(EditAntenne)
        self.Kalibrierung.setGeometry(QtCore.QRect(670, 270, 571, 141))
        self.Kalibrierung.setMinimumSize(QtCore.QSize(571, 141))
        self.Kalibrierung.setMaximumSize(QtCore.QSize(571, 141))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Kalibrierung.setFont(font)
        self.Kalibrierung.setCheckable(True)
        self.Kalibrierung.setChecked(False)
        self.Kalibrierung.setObjectName("Kalibrierung")

        self.DatumEdit = QtWidgets.QLineEdit(self.Kalibrierung)
        self.DatumEdit.setGeometry(QtCore.QRect(170, 40, 331, 28))
        self.DatumEdit.setMinimumSize(QtCore.QSize(331, 28))
        self.DatumEdit.setMaximumSize(QtCore.QSize(331, 28))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.DatumEdit.setFont(font)
        self.DatumEdit.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.DatumEdit.setText("")
        self.DatumEdit.setObjectName("DatumEdit")

        self.toolButton = QtWidgets.QToolButton(self.Kalibrierung)
        self.toolButton.setGeometry(QtCore.QRect(520, 39, 31, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.toolButton.setFont(font)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icon_materials/15.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.toolButton.setIcon(icon1)
        self.toolButton.setIconSize(QtCore.QSize(40, 40))
        self.toolButton.setAutoRaise(True)
        self.toolButton.setObjectName("toolButton")

        self.Calendar = QtWidgets.QCalendarWidget(EditAntenne)
        self.Calendar.setGeometry(QtCore.QRect(690,400,481,261))
        self.Calendar.setMinimumSize(QtCore.QSize(481, 261))
        self.Calendar.setMaximumSize(QtCore.QSize(481, 261))
        self.Calendar.setObjectName("CalendarWidts")
        self.Calendar.hide()

        self.Vorlaufzeit = QtWidgets.QLabel(self.Kalibrierung)
        self.Vorlaufzeit.setGeometry(QtCore.QRect(20, 90, 111, 28))
        self.Vorlaufzeit.setMinimumSize(QtCore.QSize(111, 28))
        self.Vorlaufzeit.setMaximumSize(QtCore.QSize(111, 28))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Vorlaufzeit.setFont(font)
        self.Vorlaufzeit.setObjectName("Vorlaufzeit")
        self.VorlaufzeitEdit = QtWidgets.QLineEdit(self.Kalibrierung)
        self.VorlaufzeitEdit.setGeometry(QtCore.QRect(170, 90, 331, 28))
        self.VorlaufzeitEdit.setMinimumSize(QtCore.QSize(331, 28))
        self.VorlaufzeitEdit.setMaximumSize(QtCore.QSize(331, 28))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.VorlaufzeitEdit.setFont(font)
        self.VorlaufzeitEdit.setObjectName("VorlaufzeitEdit")

        self.Datum = QtWidgets.QLabel(self.Kalibrierung)
        self.Datum.setGeometry(QtCore.QRect(20, 40, 71, 28))
        self.Datum.setMinimumSize(QtCore.QSize(71, 28))
        self.Datum.setMaximumSize(QtCore.QSize(71, 28))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Datum.setFont(font)
        self.Datum.setObjectName("Datum")

        self.Einstellungen = QtWidgets.QGroupBox(EditAntenne)
        self.Einstellungen.setGeometry(QtCore.QRect(50, 30, 570, 661))
        self.Einstellungen.setMinimumSize(QtCore.QSize(570, 661))
        self.Einstellungen.setMaximumSize(QtCore.QSize(570, 661))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Einstellungen.setFont(font)
        self.Einstellungen.setObjectName("Einstellungen")

        self.vertikal = QtWidgets.QGroupBox(self.Einstellungen)
        self.vertikal.setGeometry(QtCore.QRect(300, 40, 251, 121))
        self.vertikal.setMinimumSize(QtCore.QSize(251, 121))
        self.vertikal.setMaximumSize(QtCore.QSize(251, 121))
        self.vertikal.setObjectName("vertikal")

        self.VX = QtWidgets.QLabel(self.vertikal)
        self.VX.setGeometry(QtCore.QRect(20, 30, 21, 28))
        self.VX.setMinimumSize(QtCore.QSize(21, 28))
        self.VX.setMaximumSize(QtCore.QSize(21, 28))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.VX.setFont(font)
        self.VX.setObjectName("VX")

        self.VXEdit = QtWidgets.QLineEdit(self.vertikal)
        self.VXEdit.setGeometry(QtCore.QRect(100, 30, 131, 28))
        self.VXEdit.setMinimumSize(QtCore.QSize(131, 28))
        self.VXEdit.setMaximumSize(QtCore.QSize(131, 28))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.VXEdit.setFont(font)
        self.VXEdit.setObjectName("VXEdit")

        self.horizontal = QtWidgets.QGroupBox(self.Einstellungen)
        self.horizontal.setGeometry(QtCore.QRect(20, 40, 251, 121))
        self.horizontal.setMinimumSize(QtCore.QSize(251, 121))
        self.horizontal.setMaximumSize(QtCore.QSize(251, 121))
        self.horizontal.setObjectName("horizontal")

        self.HX = QtWidgets.QLabel(self.horizontal)
        self.HX.setGeometry(QtCore.QRect(20, 30, 21, 28))
        self.HX.setMinimumSize(QtCore.QSize(21, 28))
        self.HX.setMaximumSize(QtCore.QSize(21, 28))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.HX.setFont(font)
        self.HX.setObjectName("HX")

        self.HXEdit = QtWidgets.QLineEdit(self.horizontal)
        self.HXEdit.setGeometry(QtCore.QRect(100, 30, 131, 28))
        self.HXEdit.setMinimumSize(QtCore.QSize(131, 28))
        self.HXEdit.setMaximumSize(QtCore.QSize(131, 28))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.HXEdit.setFont(font)
        self.HXEdit.setObjectName("HXEdit")

        self.HY = QtWidgets.QLabel(self.Einstellungen)
        self.HY.setGeometry(QtCore.QRect(40, 110, 31, 28))
        self.HY.setMinimumSize(QtCore.QSize(31, 28))
        self.HY.setMaximumSize(QtCore.QSize(31, 28))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.HY.setFont(font)
        self.HY.setObjectName("HY")

        self.VY = QtWidgets.QLabel(self.Einstellungen)
        self.VY.setGeometry(QtCore.QRect(320, 110, 21, 28))
        self.VY.setMinimumSize(QtCore.QSize(21, 28))
        self.VY.setMaximumSize(QtCore.QSize(21, 28))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.VY.setFont(font)
        self.VY.setObjectName("VY")

        self.HYEdit = QtWidgets.QLineEdit(self.Einstellungen)
        self.HYEdit.setGeometry(QtCore.QRect(120, 110, 131, 28))
        self.HYEdit.setMinimumSize(QtCore.QSize(131, 28))
        self.HYEdit.setMaximumSize(QtCore.QSize(131, 28))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.HYEdit.setFont(font)
        self.HYEdit.setObjectName("HYEdit")

        self.VYEdit = QtWidgets.QLineEdit(self.Einstellungen)
        self.VYEdit.setGeometry(QtCore.QRect(400, 110, 131, 28))
        self.VYEdit.setMinimumSize(QtCore.QSize(131, 28))
        self.VYEdit.setMaximumSize(QtCore.QSize(131, 28))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.VYEdit.setFont(font)
        self.VYEdit.setObjectName("VYEdit")

        self.FaktorTabelle = QtWidgets.QTableWidget(self.Einstellungen)
        self.FaktorTabelle.setGeometry(QtCore.QRect(40, 330, 491, 231))
        self.FaktorTabelle.setMinimumSize(QtCore.QSize(491, 231))
        self.FaktorTabelle.setMaximumSize(QtCore.QSize(491, 231))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.FaktorTabelle.setFont(font)
        self.FaktorTabelle.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.FaktorTabelle.setShowGrid(True)
        self.FaktorTabelle.verticalHeader().setVisible(False)
        self.FaktorTabelle.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.FaktorTabelle.setObjectName("FaktorTabelle")
        self.FaktorTabelle.setColumnCount(2)
        item = QtWidgets.QTableWidgetItem()
        self.FaktorTabelle.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.FaktorTabelle.setHorizontalHeaderItem(1, item)
        self.FaktorTabelle.horizontalHeader().setDefaultSectionSize(230)

        self.SaveParameter = QtWidgets.QToolButton(self.Einstellungen)
        self.SaveParameter.setGeometry(QtCore.QRect(120, 575, 51, 51))
        self.SaveParameter.setMinimumSize(QtCore.QSize(51, 51))
        self.SaveParameter.setMaximumSize(QtCore.QSize(51, 51))
        self.SaveParameter.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icon_materials/11.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.SaveParameter.setIcon(icon2)
        self.SaveParameter.setIconSize(QtCore.QSize(51, 51))
        self.SaveParameter.setAutoRaise(True)
        self.SaveParameter.setObjectName("SaveParameter")

        self.importParameter = QtWidgets.QToolButton(self.Einstellungen)
        self.importParameter.setGeometry(QtCore.QRect(40, 575, 51, 51))
        self.importParameter.setMinimumSize(QtCore.QSize(51, 51))
        self.importParameter.setMaximumSize(QtCore.QSize(51, 51))
        self.importParameter.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icon_materials/13.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.importParameter.setIcon(icon3)
        self.importParameter.setIconSize(QtCore.QSize(51, 51))
        self.importParameter.setAutoRaise(True)
        self.importParameter.setObjectName("importParameter")

        self.clearParameter = QtWidgets.QToolButton(self.Einstellungen)
        self.clearParameter.setGeometry(QtCore.QRect(200, 575, 51, 51))
        self.clearParameter.setMinimumSize(QtCore.QSize(51, 51))
        self.clearParameter.setMaximumSize(QtCore.QSize(51, 51))
        self.clearParameter.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("icon_materials/12.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.clearParameter.setIcon(icon4)
        self.clearParameter.setIconSize(QtCore.QSize(51, 51))
        self.clearParameter.setAutoRaise(True)
        self.clearParameter.setObjectName("clearParameter")

        self.AntennenFaktoren = QtWidgets.QGroupBox(self.Einstellungen)
        self.AntennenFaktoren.setGeometry(QtCore.QRect(20, 180, 531, 461))
        self.AntennenFaktoren.setMinimumSize(QtCore.QSize(531, 461))
        self.AntennenFaktoren.setMaximumSize(QtCore.QSize(531, 461))
        self.AntennenFaktoren.setObjectName("AntennenFaktoren")

        self.UnitsEdit = QtWidgets.QComboBox(self.AntennenFaktoren)
        self.UnitsEdit.setGeometry(QtCore.QRect(380, 70, 131, 28))
        self.UnitsEdit.setMinimumSize(QtCore.QSize(131, 28))
        self.UnitsEdit.setMaximumSize(QtCore.QSize(131, 28))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.UnitsEdit.setFont(font)
        self.UnitsEdit.setEditable(True)
        self.UnitsEdit.setDuplicatesEnabled(False)
        self.UnitsEdit.setObjectName("UnitsEdit")
        self.UnitsEdit.addItem("")

        self.Units = QtWidgets.QLabel(self.AntennenFaktoren)
        self.Units.setGeometry(QtCore.QRect(20, 70, 131, 31))
        self.Units.setMinimumSize(QtCore.QSize(91, 31))
        self.Units.setMaximumSize(QtCore.QSize(1111, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Units.setFont(font)
        self.Units.setObjectName("Units")

        self.AntemmenfaktorenDatumLabel = QtWidgets.QLabel(self.AntennenFaktoren)
        self.AntemmenfaktorenDatumLabel.setGeometry(QtCore.QRect(20, 110, 81, 31))
        self.AntemmenfaktorenDatumLabel.setMinimumSize(QtCore.QSize(81, 31))
        self.AntemmenfaktorenDatumLabel.setMaximumSize(QtCore.QSize(81, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.AntemmenfaktorenDatumLabel.setFont(font)
        self.AntemmenfaktorenDatumLabel.setObjectName("AntemmenfaktorenDatumLabel")

        self.FrequenzUnitsLabel = QtWidgets.QLabel(self.AntennenFaktoren)
        self.FrequenzUnitsLabel.setGeometry(QtCore.QRect(20, 30, 151, 31))
        self.FrequenzUnitsLabel.setMinimumSize(QtCore.QSize(151, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.FrequenzUnitsLabel.setFont(font)
        self.FrequenzUnitsLabel.setObjectName("FrequenzUnitsLabel")

        self.MHzRadioButton = QtWidgets.QRadioButton(self.AntennenFaktoren)
        self.MHzRadioButton.setGeometry(QtCore.QRect(450, 30, 71, 31))
        self.MHzRadioButton.setMinimumSize(QtCore.QSize(71, 31))
        self.MHzRadioButton.setMaximumSize(QtCore.QSize(71, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.MHzRadioButton.setFont(font)
        self.MHzRadioButton.setChecked(True)
        self.MHzRadioButton.setObjectName("MHzRadioButton")

        self.HzRadioButton_2 = QtWidgets.QRadioButton(self.AntennenFaktoren)
        self.HzRadioButton_2.setGeometry(QtCore.QRect(380, 30, 51, 31))
        self.HzRadioButton_2.setMinimumSize(QtCore.QSize(51, 31))
        self.HzRadioButton_2.setMaximumSize(QtCore.QSize(51, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.HzRadioButton_2.setFont(font)
        self.HzRadioButton_2.setChecked(False)
        self.HzRadioButton_2.setObjectName("HzRadioButton_2")

        self.AntemmenfaktorenDatumEdit = QtWidgets.QLineEdit(self.AntennenFaktoren)
        self.AntemmenfaktorenDatumEdit.setGeometry(QtCore.QRect(380, 111, 131, 28))
        self.AntemmenfaktorenDatumEdit.setMinimumSize(QtCore.QSize(131, 28))
        self.AntemmenfaktorenDatumEdit.setMaximumSize(QtCore.QSize(131, 28))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.AntemmenfaktorenDatumEdit.setFont(font)
        self.AntemmenfaktorenDatumEdit.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.AntemmenfaktorenDatumEdit.setText("")
        self.AntemmenfaktorenDatumEdit.setReadOnly(True)
        self.AntemmenfaktorenDatumEdit.setObjectName("AntemmenfaktorenDatumEdit")

        self.FaktorQuelleLabel = QtWidgets.QLabel(self.AntennenFaktoren)
        self.FaktorQuelleLabel.setGeometry(QtCore.QRect(280, 390, 251, 31*4))
        self.FaktorQuelleLabel.setWordWrap(True)
        self.FaktorQuelleLabel.setAlignment(QtCore.Qt.AlignTop)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.FaktorQuelleLabel.setFont(font)
        self.FaktorQuelleLabel.setObjectName("FaktorQuelleLabel")
        self.FaktorQuelleLabel.setStyleSheet("color:rgb({},{},{},255)".format(118, 113, 113))
        self.FaktorQuelleLabel.hide()

        self.AntennenFaktoren.raise_()
        self.vertikal.raise_()
        self.horizontal.raise_()
        self.HY.raise_()
        self.VY.raise_()
        self.HYEdit.raise_()
        self.VYEdit.raise_()
        self.FaktorTabelle.raise_()
        self.SaveParameter.raise_()
        self.importParameter.raise_()
        self.clearParameter.raise_()

        self.icon = QtWidgets.QLabel(EditAntenne)
        self.icon.setGeometry(QtCore.QRect(870, 450, 170, 170))
        self.icon.setMinimumSize(QtCore.QSize(170, 170))
        self.icon.setMaximumSize(QtCore.QSize(170, 170))
        self.icon.setText("")
        self.icon.setObjectName("icon")
        self.icon.raise_()
        self.Calendar.raise_()

        self.CancelButton = QtWidgets.QPushButton(EditAntenne)
        self.CancelButton.setGeometry(QtCore.QRect(1120, 660, 121, 41))
        self.CancelButton.setMinimumSize(QtCore.QSize(121, 41))
        self.CancelButton.setMaximumSize(QtCore.QSize(121, 41))
        self.CancelButton.setObjectName("CancelButton")

        self.ApplyButton = QtWidgets.QPushButton(EditAntenne)
        self.ApplyButton.setGeometry(QtCore.QRect(980, 660, 121, 41))
        self.ApplyButton.setMinimumSize(QtCore.QSize(121, 41))
        self.ApplyButton.setMaximumSize(QtCore.QSize(121, 41))
        self.ApplyButton.setDefault(True)
        self.ApplyButton.setObjectName("ApplyButton")

        self.DiagrammToolButton = QtWidgets.QToolButton(EditAntenne)
        self.DiagrammToolButton.setGeometry(QtCore.QRect(750, 510, 411, 41))
        self.DiagrammToolButton.setMinimumSize(QtCore.QSize(411, 41))
        self.DiagrammToolButton.setMaximumSize(QtCore.QSize(411, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.DiagrammToolButton.setFont(font)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("./icon_materials/32.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.DiagrammToolButton.setIcon(icon5)
        self.DiagrammToolButton.setIconSize(QtCore.QSize(41, 41))
        self.DiagrammToolButton.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        self.DiagrammToolButton.setAutoRaise(True)
        self.DiagrammToolButton.setStyleSheet("color:rgb({},{},{},255)".format(92, 174, 219))
        self.DiagrammToolButton.setObjectName("DiagrammToolButton")
        self.DiagrammToolButton.hide()

        # import Antennenfaktoren as default data
        self.fname = "./data/Antenne_Faktoren.txt"
        quelle = os.path.abspath(self.fname)
        aFile = open(self.fname, 'r')
        date = get_FileCreateTime(self.fname)
        self.AntemmenfaktorenDatumEdit.setText(date)
        allLine = aFile.readlines()
        aFile.close()
        rowCnt = len(allLine) - 2
        self.FaktorTabelle.setRowCount(rowCnt)
        vectF = [0] * rowCnt
        vectMag = [0] * rowCnt
        for i in range(len(allLine)):
            lineText = allLine[i + 2].strip()
            strList = lineText.split()
            if self.HzRadioButton_2.isChecked():
                vectF[i] = float(strList[0][:-4])
                self.FaktorTabelle.horizontalHeaderItem(0).setText('Frequenz (Hz)')
                self.MHzRadioButton.setEnabled(False)
            if self.MHzRadioButton.isChecked():
                vectF[i] = float(strList[0][:-4]) / 1000000.0
                self.FaktorTabelle.horizontalHeaderItem(0).setText('Frequenz (MHz)')
                self.HzRadioButton_2.setEnabled(False)
            vectMag[i] = float(strList[1])
            if i == rowCnt - 1:
                break
        self.AntenneFrequentz = vectF
        self.AntenneMagnitude = vectMag
        self.FaktorQuelleLabel.show()
        self.FaktorQuelleLabel.setText("Quelle: %s" % quelle.replace("\\","/"))
        self.icon.hide()
        self.DiagrammToolButton.show()
        for x in range(rowCnt):
            item_f = QtWidgets.QTableWidgetItem('%s' % vectF[x])
            item_m = QtWidgets.QTableWidgetItem('%s' % vectMag[x])
            self.FaktorTabelle.setItem(x, 0, item_f)
            self.FaktorTabelle.setItem(x, 1, item_m)

        self.retranslateUi(EditAntenne)
        QtCore.QMetaObject.connectSlotsByName(EditAntenne)
        # define signals
        self.CancelButton.clicked['bool'].connect(EditAntenne.close)
        self.importParameter.clicked.connect(self.openfile)
        self.SaveParameter.clicked.connect(self.savefile)
        self.toolButton.clicked.connect(self.get_current_Time)
        self.Calendar.clicked[QtCore.QDate].connect(self.showDate)
        self.MHzRadioButton.clicked.connect(self.header_switch_MHz)
        self.HzRadioButton_2.clicked.connect(self.header_switch_Hz)
        self.DiagrammToolButton.clicked.connect(self.diagramm_drawed)
        self.clearParameter.clicked.connect(self.clear_factortable)
        self.ApplyButton.clicked.connect(self.slot1)

        # define the background color of the window
        pale = QtGui.QPalette()
        pale.setColor(QtGui.QPalette.Background, QtGui.QColor(248, 248, 248))
        EditAntenne.setPalette(pale)

    def retranslateUi(self, EditAntenne):
        _translate = QtCore.QCoreApplication.translate
        EditAntenne.setWindowTitle(_translate("EditAntenne", "Antenne bearbeiten"))
        self.Information.setTitle(_translate("EditAntenne", " Information"))
        self.Seriell.setText(_translate("EditAntenne", "Seriell:"))
        self.Modell.setText(_translate("EditAntenne", "Modell:"))
        self.Beschreibung.setText(_translate("EditAntenne", "Beschreibung:"))
        self.ModellEdit.setText(_translate("EditAntenne", "R&S HL 562 Ultralog"))
        self.SeriellEdit.setText(_translate("EditAntenne", "100454"))
        self.Kalibrierung.setTitle(_translate("EditAntenne", " Kalibrierung"))
        self.DatumEdit.setPlaceholderText(_translate("EditAntenne", "DD.MM.YYYY"))
        self.toolButton.setText(_translate("EditAntenne", "..."))
        self.Vorlaufzeit.setText(_translate("EditAntenne", "Vorlaufzeit:"))
        self.VorlaufzeitEdit.setText(_translate("EditAntenne", "30 Tage"))
        self.Datum.setText(_translate("EditAntenne", "Datum:"))
        self.Einstellungen.setTitle(_translate("EditAntenne", " Zusätzliche Einstellungen"))
        self.vertikal.setTitle(_translate("EditAntenne", " Vertikale Position"))
        self.VX.setText(_translate("EditAntenne", "x:"))
        self.VXEdit.setText(_translate("EditAntenne", "0cm"))
        self.horizontal.setTitle(_translate("EditAntenne", " Horizontale Position"))
        self.HX.setText(_translate("EditAntenne", "x:"))
        self.HXEdit.setText(_translate("EditAntenne", "0cm"))
        self.HY.setText(_translate("EditAntenne", "y:"))
        self.VY.setText(_translate("EditAntenne", "y:"))
        self.HYEdit.setText(_translate("EditAntenne", "80cm"))
        self.VYEdit.setText(_translate("EditAntenne", "80cm"))
        if self.MHzRadioButton.isChecked():
            item = self.FaktorTabelle.horizontalHeaderItem(0)
            item.setText(_translate("EditAntenne", "Frequenz (MHz)"))
        if self.HzRadioButton_2.isChecked():
            item = self.FaktorTabelle.horizontalHeaderItem(0)
            item.setText(_translate("EditAntenne", "Frequenz (Hz)"))
        item = self.FaktorTabelle.horizontalHeaderItem(1)
        item.setText(_translate("EditAntenne", "Faktor (dBμV/m)"))
        self.SaveParameter.setToolTip(_translate("EditAntenne", "Speichern Sie die Korrekturtabelle in einer durch Tabulatoren getrennten Textdatei."))
        self.importParameter.setToolTip(_translate("EditAntenne", "Importieren Sie die Korrekturtabelle aus einer durch Tabulatoren getrennten Textdatei."))
        self.clearParameter.setToolTip(_translate("EditAntenne", "Löschen Sie die Korrekturtabelle."))
        self.AntennenFaktoren.setTitle(_translate("EditAntenne", " Antennenfaktoren"))
        self.UnitsEdit.setItemText(0, _translate("EditAntenne", "dBμV/m"))
        self.Units.setText(_translate("EditAntenne", "Faktoreinheit:"))
        self.AntemmenfaktorenDatumLabel.setText(_translate("EditAntenne", "Datum:"))
        self.FrequenzUnitsLabel.setText(_translate("EditAntenne", "Frequenzeinheit:"))
        self.MHzRadioButton.setText(_translate("EditAntenne", "MHz"))
        self.HzRadioButton_2.setText(_translate("EditAntenne", "Hz"))
        self.AntemmenfaktorenDatumEdit.setPlaceholderText(_translate("EditAntenne", "DD.MM.YYYY"))
        self.CancelButton.setText(_translate("EditAntenne", "Zurück"))
        self.ApplyButton.setText(_translate("EditAntenne", "Anwenden"))
        self.DiagrammToolButton.setText(_translate("EditAntenne", "Diagramm der Anntenefaktoren"))
        AntenneLogo = cv.imread("./icon_materials/14.png", -1)
        AntenneLogo = png_preprocess(AntenneLogo, 170)
        self.icon.setPixmap(QtGui.QPixmap(AntenneLogo))

    # confirmation of applying the Antennenfaktoren in the table
    def slot1(self):
        messageBox = QtWidgets.QMessageBox()
        messageBox.setWindowTitle('Hinweis')
        messageBox.setIcon(QtWidgets.QMessageBox.Information)
        messageBox.setWindowIcon(QtGui.QIcon('./icon_materials/3.png'))
        messageBox.setText('Die Parameters werden erfolgreich angewendet!')
        messageBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
        buttonY = messageBox.button(QtWidgets.QMessageBox.Ok)
        buttonY.setText('Ok')
        messageBox.exec_()

    # switch the unit of frequency into MHz
    def header_switch_MHz(self):
        self.FaktorTabelle.horizontalHeaderItem(0).setText('Frequenz (MHz)')

    # switch the unit of frequency into Hz
    def header_switch_Hz(self):
        self.FaktorTabelle.horizontalHeaderItem(0).setText('Frequenz (Hz)')

    # import new Antennenfaktoren and put them into the table
    # annotate the source of the data
    # annotate the creation time of the data
    # before importing new data, make sure that there is no data left in the table, otherwiese a
    # warning messageBox appears and tells users: You must clear the current table.
    # Then you are allowed to import new data into it.
    def openfile(self):
        if self.FaktorTabelle.rowCount() == 0:
            curPath = QtCore.QDir.currentPath()
            fname, flt = QtWidgets.QFileDialog.getOpenFileName(None,'Parameter importieren', curPath, 'Parameterdateien (*.txt)')
            if (fname == ""):
                return
            aFile = open(fname, 'r')
            date = get_FileCreateTime(fname)
            self.AntemmenfaktorenDatumEdit.setText(date)
            allLine = aFile.readlines()
            aFile.close()
            fileInfo = QtCore.QFileInfo(fname)
            QtCore.QDir.setCurrent(fileInfo.absolutePath())
            rowCnt = len(allLine) - 2
            self.FaktorTabelle.setRowCount(rowCnt)
            vectF = [0] * rowCnt
            vectMag = [0] * rowCnt
            for i in range(len(allLine)):
                lineText = allLine[i+2].strip()
                strList = lineText.split()
                if self.HzRadioButton_2.isChecked():
                    vectF[i] = float(strList[0][:-4])
                    self.MHzRadioButton.setEnabled(False)
                    self.FaktorTabelle.horizontalHeaderItem(0).setText('Frequenz (Hz)')
                else:
                    vectF[i] = float(strList[0][:-4])/1000000.0
                    self.HzRadioButton_2.setEnabled(False)
                    self.FaktorTabelle.horizontalHeaderItem(0).setText('Frequenz (MHz)')
                vectMag[i] = float(strList[1])
                if i == rowCnt - 1:
                    break
            self.AntenneFrequentz = vectF
            self.AntenneMagnitude = vectMag
            self.FaktorQuelleLabel.show()
            self.FaktorQuelleLabel.setText("Quelle: %s" % fname)
            self.icon.hide()
            self.DiagrammToolButton.show()
            for x in range(rowCnt):
                item_f = QtWidgets.QTableWidgetItem('%s' % vectF[x])
                item_m = QtWidgets.QTableWidgetItem('%s' % vectMag[x])
                self.FaktorTabelle.setItem(x, 0, item_f)
                self.FaktorTabelle.setItem(x, 1, item_m)
        else:
            messageBox = QtWidgets.QMessageBox()
            messageBox.setWindowTitle('Warnung')
            messageBox.setIcon(QtWidgets.QMessageBox.Warning)
            messageBox.setWindowIcon(QtGui.QIcon('./icon_materials/3.png'))
            messageBox.setText('Bitte löschen Sie zuerst die aktuelle Tabelle!')
            messageBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
            buttonY = messageBox.button(QtWidgets.QMessageBox.Ok)
            buttonY.setText('Ok')
            messageBox.exec_()

    # save the Antennenfaktoren from the table into a .txt file
    def savefile(self):
        if self.FaktorTabelle.rowCount() == 0:
            messageBox = QtWidgets.QMessageBox()
            messageBox.setWindowTitle('Warnung')
            messageBox.setIcon(QtWidgets.QMessageBox.Warning)
            messageBox.setWindowIcon(QtGui.QIcon('./icon_materials/3.png'))
            messageBox.setText('Keine Daten sind vorhanden!')
            messageBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
            buttonY = messageBox.button(QtWidgets.QMessageBox.Ok)
            buttonY.setText('Ok')
            messageBox.exec_()
        else:
            fileName, _ = QtWidgets.QFileDialog.getSaveFileName(None, 'Parameter speichern', 'd:\\',
                                                                'Parameterdateien (*.txt)')
            f = open(fileName, "a")
            quelle = self.FaktorQuelleLabel.text()
            f.write(quelle)
            f.write('\n')
            header_0 = self.FaktorTabelle.horizontalHeaderItem(0).text()
            f.write(header_0)
            f.write('\t')
            header_1 = self.FaktorTabelle.horizontalHeaderItem(1).text()
            f.write(header_1.replace('μ','u'))
            f.write('\n')
            for x in range(self.FaktorTabelle.rowCount()):
                frequenz = self.FaktorTabelle.item(x, 0).text()
                f.write(frequenz)
                f.write('\t')
                magnitude = self.FaktorTabelle.item(x, 1).text()
                f.write(magnitude)
                f.write('\n')
            messageBox = QtWidgets.QMessageBox()
            messageBox.setWindowTitle('Hinweis')
            messageBox.setIcon(QtWidgets.QMessageBox.Information)
            messageBox.setWindowIcon(QtGui.QIcon('./icon_materials/3.png'))
            messageBox.setText('Die Daten werden erfolgreich exportiert!')
            messageBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
            buttonY = messageBox.button(QtWidgets.QMessageBox.Ok)
            buttonY.setText('Ok')
            messageBox.exec_()

    # clear all data from the table
    def clear_factortable(self):
        self.FaktorTabelle.clearContents()
        self.FaktorTabelle.setRowCount(0)
        self.DiagrammToolButton.hide()
        self.icon.show()
        self.AntemmenfaktorenDatumEdit.clear()
        self.HzRadioButton_2.setEnabled(True)
        self.MHzRadioButton.setEnabled(True)
        self.FaktorQuelleLabel.setText('')
        self.FaktorQuelleLabel.hide()
        if self.MHzRadioButton.isChecked():
            self.FaktorTabelle.horizontalHeaderItem(0).setText('Frequenz (MHz)')
        else:
            self.FaktorTabelle.horizontalHeaderItem(0).setText('Frequenz (Hz)')

    # draw a digramm for the current Antennenfaktoren in the table
    def diagramm_drawed(self):
        if self.MHzRadioButton.isChecked():
            plt.semilogx(self.AntenneFrequentz, self.AntenneMagnitude, linewidth=2)
            plt.gcf().canvas.set_window_title('Diagramm der Antennenfaktoren')
            plt.xlabel("Frequenz in MHz", fontsize=12)
            plt.ylabel("Magnitude in dBμV/m", fontsize=12)
            plt.grid(True, which="both", ls='--')
            plt.tick_params(direction='inout')
            plt.xlim(xmin=30, xmax=3000)
            plt.ylim(ymin=0, ymax=35)
            plt.show()
        if self.HzRadioButton_2.isChecked():
            plt.semilogx(self.AntenneFrequentz, self.AntenneMagnitude, linewidth=2)
            plt.gcf().canvas.set_window_title('Diagramm der Antennenfaktoren')
            plt.xlabel("Frequenz in Hz", fontsize=12)
            plt.ylabel("Magnitude in dBμV/m", fontsize=12)
            plt.grid(True, which="both", ls='--')
            plt.tick_params(direction='inout')
            plt.xlim(xmin=30000000, xmax=3000000000)
            plt.ylim(ymin=0, ymax=35)
            plt.show()

    # get the current time, in order to record the calibration time for the antenne easily
    def get_current_Time(self):
        if self.Kalibrierung.isChecked():
            self.Calendar.setGridVisible(True)
            self.Calendar.show()

    # show the current time in a perticular way: DD.MM.YYYY
    def showDate(self):
        data = self.Calendar.selectedDate()
        self.DatumEdit.setText(data.toString(QtCore.Qt.ISODate))
        self.Calendar.hide()

# This class defines the "Gerätemanagement" window, which is for device management.
# It's Qt-Designer file is "ManagementderAusrustung.ui" in folder "uifiles"
class FE_EquipmentManagement(object):
    def setupUi(self, EquipmentManagement):
        EquipmentManagement.setObjectName("EquipmentManagement")
        EquipmentManagement.setWindowModality(QtCore.Qt.WindowModal)
        EquipmentManagement.resize(1401, 792)
        EquipmentManagement.setMinimumSize(QtCore.QSize(1401, 792))
        EquipmentManagement.setMaximumSize(QtCore.QSize(1401, 792))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        EquipmentManagement.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon_materials/3.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        EquipmentManagement.setWindowIcon(icon)

        # initialization of the Antennenfaktoren und Kabeldämpfungen
        self.frequenz1 = []
        self.magnitude1 = []
        self.frequenz2 = []
        self.magnitude2 = []
        self.anntenfre = []
        self.anntenmag = []

        self.tabWidget = QtWidgets.QTabWidget(EquipmentManagement)
        self.tabWidget.setGeometry(QtCore.QRect(30, 30, 1341, 661))
        self.tabWidget.setMinimumSize(QtCore.QSize(1341, 661))
        self.tabWidget.setMaximumSize(QtCore.QSize(1341, 661))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.tabWidget.setFont(font)
        self.tabWidget.setAcceptDrops(True)
        self.tabWidget.setToolTip("")
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.tabWidget.setIconSize(QtCore.QSize(20, 20))
        self.tabWidget.setDocumentMode(False)
        self.tabWidget.setObjectName("tabWidget")

        self.listderausrustung = QtWidgets.QWidget()
        self.listderausrustung.setObjectName("listderausrustung")

        self.treeWidget = QtWidgets.QTreeWidget(self.listderausrustung)
        self.treeWidget.setGeometry(QtCore.QRect(30, 100, 1271, 501))
        self.treeWidget.setMinimumSize(QtCore.QSize(1271, 501))
        self.treeWidget.setMaximumSize(QtCore.QSize(1271, 501))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(12)
        self.treeWidget.setFont(font)
        self.treeWidget.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.treeWidget.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.treeWidget.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.treeWidget.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.treeWidget.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectItems)
        self.treeWidget.setRootIsDecorated(True)
        self.treeWidget.setUniformRowHeights(True)
        self.treeWidget.setAnimated(True)
        self.treeWidget.setAllColumnsShowFocus(False)
        self.treeWidget.setWordWrap(False)
        self.treeWidget.setHeaderHidden(False)
        self.treeWidget.setObjectName("treeWidget")
        self.treeWidget.headerItem().setTextAlignment(0, QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.treeWidget.headerItem().setFont(0, font)
        self.treeWidget.headerItem().setTextAlignment(1, QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.treeWidget.headerItem().setFont(1, font)
        self.treeWidget.headerItem().setTextAlignment(2, QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.treeWidget.headerItem().setFont(2, font)
        self.treeWidget.headerItem().setTextAlignment(3, QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.treeWidget.headerItem().setFont(3, font)
        self.treeWidget.headerItem().setTextAlignment(4, QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.treeWidget.headerItem().setFont(4, font)
        item_0 = QtWidgets.QTreeWidgetItem(self.treeWidget)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item_0.setFont(0, font)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item_1.setFont(0, font)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        item_2.setFont(0, font)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        item_2.setFont(1, font)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item_1.setFont(0, font)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item_1.setFont(0, font)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        item_1.setFont(1, font)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item_1.setFont(0, font)
        item_0 = QtWidgets.QTreeWidgetItem(self.treeWidget)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        item_0.setFont(0, font)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item_0.setFont(1, font)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        item_1.setFont(0, font)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        item_1.setFont(1, font)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        item_1.setFont(2, font)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        item_1.setFont(3, font)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        item_1.setFont(4, font)
        item_0 = QtWidgets.QTreeWidgetItem(self.treeWidget)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item_0.setFont(0, font)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        item_1.setFont(0, font)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        item_1.setFont(1, font)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        item_1.setFont(2, font)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        item_1.setFont(3, font)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        item_1.setFont(4, font)
        item_0 = QtWidgets.QTreeWidgetItem(self.treeWidget)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item_0.setFont(0, font)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        item_1.setFont(0, font)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        item_1.setFont(1, font)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        item_1.setFont(0, font)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        item_1.setFont(1, font)
        self.treeWidget.header().setCascadingSectionResizes(True)
        self.treeWidget.header().setDefaultSectionSize(355)
        self.treeWidget.header().setHighlightSections(False)
        self.treeWidget.header().setMinimumSectionSize(41)

        self.NeuButton = QtWidgets.QToolButton(self.listderausrustung)
        self.NeuButton.setGeometry(QtCore.QRect(690, 30, 131, 41))
        self.NeuButton.setMinimumSize(QtCore.QSize(131, 41))
        self.NeuButton.setMaximumSize(QtCore.QSize(131, 41))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        self.NeuButton.setFont(font)
        self.NeuButton.setObjectName("NeuButton")

        self.CopyButton = QtWidgets.QToolButton(self.listderausrustung)
        self.CopyButton.setGeometry(QtCore.QRect(850, 30, 131, 41))
        self.CopyButton.setMinimumSize(QtCore.QSize(131, 41))
        self.CopyButton.setMaximumSize(QtCore.QSize(131, 41))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        self.CopyButton.setFont(font)
        self.CopyButton.setObjectName("CopyButton")

        self.ProcessButton = QtWidgets.QToolButton(self.listderausrustung)
        self.ProcessButton.setGeometry(QtCore.QRect(1010, 30, 131, 41))
        self.ProcessButton.setMinimumSize(QtCore.QSize(131, 41))
        self.ProcessButton.setMaximumSize(QtCore.QSize(131, 41))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        self.ProcessButton.setFont(font)
        self.ProcessButton.setObjectName("ProcessButton")

        self.deleteButton = QtWidgets.QToolButton(self.listderausrustung)
        self.deleteButton.setGeometry(QtCore.QRect(1170, 30, 131, 41))
        self.deleteButton.setMinimumSize(QtCore.QSize(131, 41))
        self.deleteButton.setMaximumSize(QtCore.QSize(131, 41))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        self.deleteButton.setFont(font)
        self.deleteButton.setObjectName("deleteButton")

        self.ListErweiterung = QtWidgets.QToolButton(self.listderausrustung)
        self.ListErweiterung.setGeometry(QtCore.QRect(30, 50, 171, 41))
        self.ListErweiterung.setMinimumSize(QtCore.QSize(171, 41))
        self.ListErweiterung.setMaximumSize(QtCore.QSize(171, 41))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setUnderline(True)
        font.setPointSize(10)
        self.ListErweiterung.setFont(font)
        self.ListErweiterung.setAutoRaise(True)
        self.ListErweiterung.setStyleSheet("color:rgb({},{},{},255)".format(92, 174, 219))
        self.ListErweiterung.setObjectName("ListErweiterung")

        self.ListZusammenbrechen = QtWidgets.QToolButton(self.listderausrustung)
        self.ListZusammenbrechen.setGeometry(QtCore.QRect(230, 50, 261, 41))
        self.ListZusammenbrechen.setMinimumSize(QtCore.QSize(261, 41))
        self.ListZusammenbrechen.setMaximumSize(QtCore.QSize(261, 41))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setUnderline(True)
        font.setPointSize(10)
        self.ListZusammenbrechen.setFont(font)
        self.ListZusammenbrechen.setAutoRaise(True)
        self.ListZusammenbrechen.setStyleSheet("color:rgb({},{},{},255)".format(92, 174, 219))
        self.ListZusammenbrechen.setObjectName("ListZusammenbrechen")

        self.tabWidget.addTab(self.listderausrustung, "")
        self.systemcontroller = QtWidgets.QWidget()
        self.systemcontroller.setObjectName("systemcontroller")

        self.controllerErweitern = QtWidgets.QToolButton(self.systemcontroller)
        self.controllerErweitern.setGeometry(QtCore.QRect(30, 50, 171, 41))
        self.controllerErweitern.setMinimumSize(QtCore.QSize(171, 41))
        self.controllerErweitern.setMaximumSize(QtCore.QSize(171, 41))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setUnderline(True)
        font.setPointSize(10)
        self.controllerErweitern.setFont(font)
        self.controllerErweitern.setAutoRaise(True)
        self.controllerErweitern.setStyleSheet("color:rgb({},{},{},255)".format(92, 174, 219))
        self.controllerErweitern.setObjectName("controllerErweitern")

        self.label_4 = QtWidgets.QToolButton(self.systemcontroller)
        self.label_4.setGeometry(QtCore.QRect(230, 50, 261, 41))
        self.label_4.setMinimumSize(QtCore.QSize(261, 41))
        self.label_4.setMaximumSize(QtCore.QSize(261, 41))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setUnderline(True)
        font.setPointSize(10)
        self.label_4.setFont(font)
        self.label_4.setAutoRaise(True)
        self.label_4.setStyleSheet("color:rgb({},{},{},255)".format(92, 174, 219))
        self.label_4.setObjectName("label_4")

        self.KontrollerController = QtWidgets.QTreeWidget(self.systemcontroller)
        self.KontrollerController.setGeometry(QtCore.QRect(30, 100, 601, 491))
        self.KontrollerController.setMinimumSize(QtCore.QSize(601, 491))
        self.KontrollerController.setMaximumSize(QtCore.QSize(601, 491))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        self.KontrollerController.setFont(font)
        self.KontrollerController.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.KontrollerController.setSelectionMode(QtWidgets.QAbstractItemView.MultiSelection)
        self.KontrollerController.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectItems)
        self.KontrollerController.setUniformRowHeights(True)
        self.KontrollerController.setAnimated(True)
        self.KontrollerController.setObjectName("KontrollerController")
        self.KontrollerController.headerItem().setTextAlignment(0, QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.KontrollerController.headerItem().setFont(0, font)
        self.KontrollerController.headerItem().setTextAlignment(1, QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.KontrollerController.headerItem().setFont(1, font)
        item_0 = QtWidgets.QTreeWidgetItem(self.KontrollerController)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item_0.setFont(0, font)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        item_0.setFont(1, font)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item_1.setFont(0, font)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item_2.setFont(0, font)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        item_2.setFont(1, font)
        item_3 = QtWidgets.QTreeWidgetItem(item_2)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        item_3.setFont(0, font)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        item_3.setFont(1, font)
        item_3 = QtWidgets.QTreeWidgetItem(item_2)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        item_3.setFont(0, font)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        item_3.setFont(1, font)
        item_3 = QtWidgets.QTreeWidgetItem(item_2)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        item_3.setFont(0, font)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        item_3.setFont(1, font)
        item_3 = QtWidgets.QTreeWidgetItem(item_2)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        item_3.setFont(0, font)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        item_3.setFont(1, font)
        self.KontrollerController.header().setCascadingSectionResizes(True)
        self.KontrollerController.header().setDefaultSectionSize(280)

        self.Positiondetails = QtWidgets.QGroupBox(self.systemcontroller)
        self.Positiondetails.setGeometry(QtCore.QRect(700, 90, 601, 501))
        self.Positiondetails.setMinimumSize(QtCore.QSize(601, 501))
        self.Positiondetails.setMaximumSize(QtCore.QSize(601, 501))
        self.Positiondetails.setCheckable(False)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        self.Positiondetails.setFont(font)
        self.Positiondetails.setObjectName("Positiondetails")

        self.PositionName = QtWidgets.QLabel(self.Positiondetails)
        self.PositionName.setGeometry(QtCore.QRect(20, 50, 131, 31))
        self.PositionName.setMinimumSize(QtCore.QSize(131, 31))
        self.PositionName.setMaximumSize(QtCore.QSize(131, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.PositionName.setFont(font)
        self.PositionName.setObjectName("PositionName")

        self.VerbindungMit = QtWidgets.QLabel(self.Positiondetails)
        self.VerbindungMit.setGeometry(QtCore.QRect(20, 130, 171, 31))
        self.VerbindungMit.setMinimumSize(QtCore.QSize(171, 31))
        self.VerbindungMit.setMaximumSize(QtCore.QSize(171, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.VerbindungMit.setFont(font)
        self.VerbindungMit.setObjectName("VerbindungMit")

        self.filter = QtWidgets.QLabel(self.Positiondetails)
        self.filter.setGeometry(QtCore.QRect(20, 210, 191, 31))
        self.filter.setMinimumSize(QtCore.QSize(191, 31))
        self.filter.setMaximumSize(QtCore.QSize(191, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.filter.setFont(font)
        self.filter.setObjectName("filter")

        self.Zuordnung = QtWidgets.QLabel(self.Positiondetails)
        self.Zuordnung.setGeometry(QtCore.QRect(20, 290, 231, 31))
        self.Zuordnung.setMinimumSize(QtCore.QSize(231, 31))
        self.Zuordnung.setMaximumSize(QtCore.QSize(231, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Zuordnung.setFont(font)
        self.Zuordnung.setObjectName("Zuordnung")

        self.NameEditor = QtWidgets.QLineEdit(self.Positiondetails)
        self.NameEditor.setEnabled(False)
        self.NameEditor.setGeometry(QtCore.QRect(270, 50, 301, 31))
        self.NameEditor.setMinimumSize(QtCore.QSize(301, 31))
        self.NameEditor.setMaximumSize(QtCore.QSize(301, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.NameEditor.setFont(font)
        self.NameEditor.setObjectName("NameEditor")

        self.radioButton = QtWidgets.QRadioButton(self.Positiondetails)
        self.radioButton.setGeometry(QtCore.QRect(270, 130, 131, 31))
        self.radioButton.setMinimumSize(QtCore.QSize(131, 31))
        self.radioButton.setMaximumSize(QtCore.QSize(131, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radioButton.setFont(font)
        self.radioButton.setChecked(True)
        self.radioButton.setObjectName("radioButton")

        self.radioButton_2 = QtWidgets.QRadioButton(self.Positiondetails)
        self.radioButton_2.setGeometry(QtCore.QRect(400, 130, 181, 31))
        self.radioButton_2.setMinimumSize(QtCore.QSize(181, 31))
        self.radioButton_2.setMaximumSize(QtCore.QSize(181, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radioButton_2.setFont(font)
        self.radioButton_2.setObjectName("radioButton_2")

        self.FilterComboBox = QtWidgets.QComboBox(self.Positiondetails)
        self.FilterComboBox.setEnabled(False)
        self.FilterComboBox.setGeometry(QtCore.QRect(270, 210, 301, 31))
        self.FilterComboBox.setMinimumSize(QtCore.QSize(301, 31))
        self.FilterComboBox.setMaximumSize(QtCore.QSize(301, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.FilterComboBox.setFont(font)
        self.FilterComboBox.setEditable(True)
        self.FilterComboBox.setObjectName("FilterComboBox")

        self.AusrustungCombox = QtWidgets.QComboBox(self.Positiondetails)
        self.AusrustungCombox.setEnabled(False)
        self.AusrustungCombox.setGeometry(QtCore.QRect(270, 290, 301, 31))
        self.AusrustungCombox.setMinimumSize(QtCore.QSize(301, 31))
        self.AusrustungCombox.setMaximumSize(QtCore.QSize(301, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.AusrustungCombox.setFont(font)
        self.AusrustungCombox.setEditable(True)
        self.AusrustungCombox.setObjectName("AusrustungCombox")

        self.ZuordnungBesitigen = QtWidgets.QToolButton(self.Positiondetails)
        self.ZuordnungBesitigen.setEnabled(False)
        self.ZuordnungBesitigen.setGeometry(QtCore.QRect(270, 390, 301, 31))
        self.ZuordnungBesitigen.setMinimumSize(QtCore.QSize(301, 31))
        self.ZuordnungBesitigen.setMaximumSize(QtCore.QSize(301, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.ZuordnungBesitigen.setFont(font)
        self.ZuordnungBesitigen.setObjectName("ZuordnungBesitigen")

        self.tabWidget.addTab(self.systemcontroller, "")

        self.HelpButton = QtWidgets.QToolButton(EquipmentManagement)
        self.HelpButton.setGeometry(QtCore.QRect(60, 720, 131, 41))
        self.HelpButton.setMinimumSize(QtCore.QSize(131, 41))
        self.HelpButton.setMaximumSize(QtCore.QSize(131, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.HelpButton.setFont(font)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icon_materials/9.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.HelpButton.setIcon(icon1)
        self.HelpButton.setIconSize(QtCore.QSize(31, 31))
        self.HelpButton.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        self.HelpButton.setObjectName("HelpButton")

        self.SettingApplied = QtWidgets.QToolButton(EquipmentManagement)
        self.SettingApplied.setGeometry(QtCore.QRect(1040, 720, 131, 41))
        self.SettingApplied.setMinimumSize(QtCore.QSize(131, 41))
        self.SettingApplied.setMaximumSize(QtCore.QSize(131, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.SettingApplied.setFont(font)
        self.SettingApplied.setObjectName("SettingApplied")

        self.BackButton = QtWidgets.QToolButton(EquipmentManagement)
        self.BackButton.setGeometry(QtCore.QRect(1220, 720, 131, 41))
        self.BackButton.setMinimumSize(QtCore.QSize(131, 41))
        self.BackButton.setMaximumSize(QtCore.QSize(131, 41))
        self.BackButton.setBaseSize(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.BackButton.setFont(font)
        self.BackButton.setObjectName("BackButton")

        self.toolButton = QtWidgets.QToolButton(EquipmentManagement)
        self.toolButton.setGeometry(QtCore.QRect(1240, 20, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        self.toolButton.setFont(font)
        self.toolButton.setObjectName("toolButton")

        self.retranslateUi(EquipmentManagement)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(EquipmentManagement)

        # define the backgroundcolor of the window
        pale = QtGui.QPalette()
        pale.setColor(QtGui.QPalette.Background, QtGui.QColor(248, 248, 248))
        EquipmentManagement.setPalette(pale)

    def retranslateUi(self, EquipmentManagement):
        _translate = QtCore.QCoreApplication.translate
        EquipmentManagement.setWindowTitle(_translate("EquipmentManagement", "Gerätemanagement"))
        self.treeWidget.headerItem().setText(0, _translate("EquipmentManagement", "Namen"))
        self.treeWidget.headerItem().setText(1, _translate("EquipmentManagement", "Kalibrierungsdaten"))
        self.treeWidget.headerItem().setText(2, _translate("EquipmentManagement", "Treiber"))
        self.treeWidget.headerItem().setText(3, _translate("EquipmentManagement", "Adresse"))
        self.treeWidget.headerItem().setText(4, _translate("EquipmentManagement", "Beschreibung"))
        __sortingEnabled = self.treeWidget.isSortingEnabled()
        self.treeWidget.setSortingEnabled(False)
        self.treeWidget.topLevelItem(0).setText(0, _translate("EquipmentManagement", "Antenne"))
        self.treeWidget.topLevelItem(0).child(0).setText(0, _translate("EquipmentManagement", "Antenne"))
        self.treeWidget.topLevelItem(0).child(0).child(0).setText(0, _translate("EquipmentManagement", "R&S HL562"))
        self.treeWidget.topLevelItem(0).child(0).child(0).setText(1, _translate("EquipmentManagement", "--"))
        self.treeWidget.topLevelItem(0).child(1).setText(0, _translate("EquipmentManagement", "Antenne Kontroller"))
        self.treeWidget.topLevelItem(0).child(2).setText(0, _translate("EquipmentManagement", "RF Abschwächer"))
        self.treeWidget.topLevelItem(0).child(3).setText(0, _translate("EquipmentManagement", "Pre-Amp"))
        self.treeWidget.topLevelItem(1).setText(0, _translate("EquipmentManagement", "Receiver Mode"))
        self.treeWidget.topLevelItem(1).child(0).setText(0, _translate("EquipmentManagement", "ESPI 1142.8007.03 "))
        self.treeWidget.topLevelItem(1).child(0).setText(1, _translate("EquipmentManagement", "--"))
        self.treeWidget.topLevelItem(1).child(0).setText(2, _translate("EquipmentManagement", "ESPI.dll"))
        self.treeWidget.topLevelItem(1).child(0).setText(3, _translate("EquipmentManagement", "GPIB0::20::INSTR"))
        self.treeWidget.topLevelItem(1).child(0).setText(4, _translate("EquipmentManagement", "verwendet nur Receiver-Mode"))
        self.treeWidget.topLevelItem(2).setText(0, _translate("EquipmentManagement", "System Kontroller"))
        self.treeWidget.topLevelItem(2).child(0).setText(0, _translate("EquipmentManagement", "HP 3488A - 0000"))
        self.treeWidget.topLevelItem(2).child(0).setText(1, _translate("EquipmentManagement", "--"))
        self.treeWidget.topLevelItem(2).child(0).setText(2, _translate("EquipmentManagement", "HP3488A.dll"))
        self.treeWidget.topLevelItem(2).child(0).setText(3, _translate("EquipmentManagement", "GPIB0::9::INSTR"))
        self.treeWidget.topLevelItem(2).child(0).setText(4, _translate("EquipmentManagement", "schaltet Verstärker, selbstgeschriebener Treiber"))
        self.treeWidget.topLevelItem(3).setText(0, _translate("EquipmentManagement", "Kabel"))
        self.treeWidget.topLevelItem(3).child(0).setText(0, _translate("EquipmentManagement", "LMK11"))
        self.treeWidget.topLevelItem(3).child(0).setText(1, _translate("EquipmentManagement", "--"))
        self.treeWidget.topLevelItem(3).child(1).setText(0, _translate("EquipmentManagement", "LMK12"))
        self.treeWidget.topLevelItem(3).child(1).setText(1, _translate("EquipmentManagement", "--"))
        self.treeWidget.setSortingEnabled(__sortingEnabled)
        self.NeuButton.setText(_translate("EquipmentManagement", "Neu"))
        self.CopyButton.setText(_translate("EquipmentManagement", "Kopieren"))
        self.ProcessButton.setText(_translate("EquipmentManagement", "Bearbeiten"))
        self.deleteButton.setText(_translate("EquipmentManagement", "Löschen"))
        self.ListErweiterung.setText(_translate("EquipmentManagement", "+ Alle erweitern"))
        self.ListZusammenbrechen.setText(_translate("EquipmentManagement", "- Alle zusammenbrechen"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.listderausrustung), _translate("EquipmentManagement", "Liste der Geräte"))
        self.controllerErweitern.setText(_translate("EquipmentManagement", "+ Alle erweitern"))
        self.label_4.setText(_translate("EquipmentManagement", "- Alle zusammenbrechen"))
        self.KontrollerController.headerItem().setText(0, _translate("EquipmentManagement", "System Kontroller"))
        self.KontrollerController.headerItem().setText(1, _translate("EquipmentManagement", "Details"))
        __sortingEnabled = self.KontrollerController.isSortingEnabled()
        self.KontrollerController.setSortingEnabled(False)
        self.KontrollerController.topLevelItem(0).setText(0, _translate("EquipmentManagement", "HP 3488A -0000"))
        self.KontrollerController.topLevelItem(0).setText(1, _translate("EquipmentManagement", "SC2000/Custom"))
        self.KontrollerController.topLevelItem(0).child(0).setText(0, _translate("EquipmentManagement", "Kontroller 1"))
        self.KontrollerController.topLevelItem(0).child(0).child(0).setText(0, _translate("EquipmentManagement", "Switch 1"))
        self.KontrollerController.topLevelItem(0).child(0).child(0).setText(1, _translate("EquipmentManagement", "Switches Amplifiers"))
        self.KontrollerController.topLevelItem(0).child(0).child(0).child(0).setText(0, _translate("EquipmentManagement", "Common"))
        self.KontrollerController.topLevelItem(0).child(0).child(0).child(0).setText(1, _translate("EquipmentManagement", "-"))
        self.KontrollerController.topLevelItem(0).child(0).child(0).child(1).setText(0, _translate("EquipmentManagement", "Position 1"))
        self.KontrollerController.topLevelItem(0).child(0).child(0).child(1).setText(1, _translate("EquipmentManagement", "AR 100L 10kHz-220MHz-0000"))
        self.KontrollerController.topLevelItem(0).child(0).child(0).child(2).setText(0, _translate("EquipmentManagement", "Position 2"))
        self.KontrollerController.topLevelItem(0).child(0).child(0).child(2).setText(1, _translate("EquipmentManagement", "AR 100W1000M180 - 1000MHz - 0000"))
        self.KontrollerController.topLevelItem(0).child(0).child(0).child(3).setText(0, _translate("EquipmentManagement", "Position 3"))
        self.KontrollerController.topLevelItem(0).child(0).child(0).child(3).setText(1, _translate("EquipmentManagement", "AR 50S1G4 800MHz - 4.2GHz - 0000"))
        self.KontrollerController.setSortingEnabled(__sortingEnabled)
        self.Positiondetails.setTitle(_translate("EquipmentManagement", " Positionsdetails "))
        self.PositionName.setText(_translate("EquipmentManagement", "Name:"))
        self.VerbindungMit.setText(_translate("EquipmentManagement", "Verbunden mit:"))
        self.filter.setText(_translate("EquipmentManagement", "Experimenter Filter:"))
        self.Zuordnung.setText(_translate("EquipmentManagement", "Zugeordnete Ausrüstung:"))
        self.radioButton.setText(_translate("EquipmentManagement", "Ausrüstung"))
        self.radioButton_2.setText(_translate("EquipmentManagement", "Anderer Schalter"))
        self.FilterComboBox.setCurrentText(_translate("EquipmentManagement", "Alle"))
        self.AusrustungCombox.setCurrentText(_translate("EquipmentManagement", "--"))
        self.ZuordnungBesitigen.setText(_translate("EquipmentManagement", "Zuordnung beseitigen"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.systemcontroller), _translate("EquipmentManagement", "System Kontroller"))
        self.HelpButton.setText(_translate("EquipmentManagement", "  Hilfe"))
        self.SettingApplied.setText(_translate("EquipmentManagement", "Anwenden"))
        self.BackButton.setText(_translate("EquipmentManagement", "Zurück"))
        self.toolButton.setText(_translate("EquipmentManagement", "Port Tester"))

        # define signals
        self.ListErweiterung.clicked.connect(self.treeWidget.expandAll)
        self.ListZusammenbrechen.clicked.connect(self.treeWidget.collapseAll)
        self.label_4.clicked.connect(self.KontrollerController.collapseAll)
        self.controllerErweitern.clicked.connect(self.KontrollerController.expandAll)
        self.treeWidget.itemDoubleClicked.connect(self.openwindow)
        self.BackButton.clicked.connect(EquipmentManagement.close)
        self.SettingApplied.clicked.connect(self.slota)

    # confirmation of applying the settings of device management
    def slota(self):
        messageBox = QtWidgets.QMessageBox()
        messageBox.setWindowTitle('Hinweis')
        messageBox.setIcon(QtWidgets.QMessageBox.Information)
        messageBox.setWindowIcon(QtGui.QIcon('./icon_materials/3.png'))
        messageBox.setText('Die Einstellungen für alle Geräte sind fertig!')
        messageBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
        buttonY = messageBox.button(QtWidgets.QMessageBox.Ok)
        buttonY.setText('Ok')
        messageBox.exec_()

    # when double click a item in the treeView, the corrosponding window should show up.
    # e. g. if item "Antenne" is double clicked, the "Antenne bearbeiten" window will appear
    def openwindow(self,index):
        getSelected = self.treeWidget.selectedItems()
        if getSelected:
            baseNode = getSelected[0]
            getChildNode = baseNode.text(0)
            if getChildNode == 'Antenne':
                widget = QtWidgets.QDialog()
                ui = Ui_EditAntenne()
                ui.setupUi(widget)
                widget.exec_()
                self.anntenfre=ui.AntenneFrequentz
                self.anntenmag=ui.AntenneMagnitude
            elif getChildNode == "Kabel"  :                       #
                widget = QtWidgets.QDialog()
                ui = Ui_Kabel()
                ui.setupUi(widget)
                widget.exec_()
                self.frequenz1 = ui.KabelFrequentz1
                self.magnitude1 = ui.KabelMagnitude1
                self.frequenz2 = ui.KabelFrequentz2
                self.magnitude2 = ui.KabelMagnitude2
            elif getChildNode ==  "LMK11" :                       #
                widget = QtWidgets.QDialog()
                ui = Ui_Kabel()
                ui.setupUi(widget)
                widget.exec_()
                self.frequenz1 = ui.KabelFrequentz1
                self.magnitude1 = ui.KabelMagnitude1
                self.frequenz2 = ui.KabelFrequentz2
                self.magnitude2 = ui.KabelMagnitude2
            elif getChildNode ==  "LMK12" :                       #
                widget = QtWidgets.QDialog()
                ui = Ui_Kabel()
                ui.setupUi(widget)
                widget.exec_()
                self.frequenz1 = ui.KabelFrequentz1
                self.magnitude1 = ui.KabelMagnitude1
                self.frequenz2 = ui.KabelFrequentz2
                self.magnitude2 = ui.KabelMagnitude2
            '''else:
                return'''

# function that can process .jpg image
def pic_preprocess(img, new_height):
    show = cv.cvtColor(img, cv.COLOR_BGR2RGB)
    width = show.shape[1]
    height = show.shape[0]
    ratio = float(height / width)
    new_width = int(new_height / ratio)
    show = cv.resize(show, (new_width, new_height))
    totalBytes = show.nbytes
    bytesPerLine = int(totalBytes / new_height)
    return QtGui.QImage(show, new_width, new_height, bytesPerLine, QtGui.QImage.Format_RGB888)

# function that can process .png image
def png_preprocess(img, new_height):
    width = img.shape[1]
    height = img.shape[0]
    ratio = float(height / width)
    new_width = int(new_height / ratio)
    show = cv.resize(img, (new_width, new_height))
    totalBytes = show.nbytes
    bytesPerLine = int(totalBytes / new_height)
    return QtGui.QImage(show, new_width, new_height, bytesPerLine, QtGui.QImage.Format_ARGB32)

# convert unreadable timestamp to readable time: e.g. 1479264792 to 16-11-2016 10:53:12
def TimeStampToTime(timestamp):
    timeStruct = time.localtime(timestamp)
    return time.strftime('%d.%m.%Y', timeStruct)

# Get the creation time of the file
def get_FileCreateTime(filePath):
    t = os.path.getctime(filePath)
    return TimeStampToTime(t)

# Get the modification time of the file
def get_FileModifyTime(filePath):
    t = os.path.getmtime(filePath)
    return TimeStampToTime(t)


if __name__ == "__main__":
    QtCore.QCoreApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)  # 用于自适应屏幕，在自己电脑上使用可能GUI太大，带上屏幕之后没有问题
    import sys
    app = QtWidgets.QApplication(sys.argv)
    EquipmentManagement = QtWidgets.QWidget()
    ui = FE_EquipmentManagement()
    ui.setupUi(EquipmentManagement)
    EquipmentManagement.show()
    sys.exit(app.exec_())