# -*- coding: utf-8 -*-
# 
# # Form implementation generated from reading ui file 'TestWindow_LS.ui'
# #
# # Created by: PyQt5 UI code generator 5.15.2
# #
# # WARNING: Any manual changes made to this file will be lost when pyuic5 is
# # run again.  Do not edit this file unless you know what you are doing.


import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtChart
import time
import numpy as np
import math
from PyQt5.QtPrintSupport import QPrinter, QPrintDialog, QPrintPreviewDialog
import WordReportGenerator
import cv2 as cv
import qimage2ndarray
import os
from thread_FS import External_FS

sys.path.append('gui')


# "PyQt5.QtPrintSupport" supports printer. Qprint is used to print the diagram in Test Window.
# QprintDialog is used to open the printer window.
# QpagesteupDialog is used for printer settings.


# this class is used to customized a QChartView that can realize advanced functions.
# The advanced function is: When you press the left mouse on the diagramm in order to make a selection,
# a rectangular selection box will be displayed as the mouse is dragged.


class QmyChartView(QtChart.QChartView):
    mouseMove = QtCore.pyqtSignal(QtCore.QPoint)  # signal from mouse movement

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setDragMode(QtWidgets.QGraphicsView.RubberBandDrag)
        self.__beginPoint = QtCore.QPoint()  # start point of the rectangular selection box
        self.__endPoint = QtCore.QPoint()  # end point of the rectangular selection box

    # define the method of mouse press
    def mousePressEvent(self, event):  # mouse click
        if event.button() == QtCore.Qt.LeftButton:
            self.__beginPoint = event.pos()  # record the start point
        super().mousePressEvent(event)

    def mouseMoveEvent(self, event):  # mouse click
        if event.button() == QtCore.Qt.leftButton:
            self.__beginPoint = event.pos()  # record the start point
        super().mousePressEvent(event)

    def mouseMoveEvent(self, event):  # mouse movement
        point = event.pos()
        self.mouseMove.emit(point)  # emit the mouse movement signal
        super().mouseMoveEvent(event)

    def mouseReleaseEvent(self, event):  # Mouse left frame selection to zoom in, right click to restore
        if event.button() == QtCore.Qt.LeftButton:
            self.__endPoint = event.pos()
            rectF = QtCore.QRectF()
            rectF.setTopLeft(self.__beginPoint)
            rectF.setBottomRight(self.__endPoint)
            self.chart().zoomIn(rectF)  # zoom in the selected rectangular area
        elif event.button() == QtCore.Qt.RightButton:
            self.chart().zoomReset()  # right click to restore the zoomed area
        super().mouseReleaseEvent(event)

    def keyPressEvent(self, event):  # define the key press event
        key = event.key()
        if key == QtCore.Qt.Key_Plus:
            self.chart().zoom(1.2)
        elif key == QtCore.Qt.Key_Minus:
            self.chart().zoom(0.8)
        elif key == QtCore.Qt.Key_Left:
            self.chart().scroll(10, 0)
        elif key == QtCore.Qt.Key_Right:
            self.chart().scroll(-10, 0)
        elif key == QtCore.Qt.Key_Up:
            self.chart().scroll(0, -10)
        elif key == QtCore.Qt.Key_Down:
            self.chart().scroll(0, 10)
        elif key == QtCore.Qt.Key_PageUp:
            self.chart().scroll(0, -50)
        elif key == QtCore.Qt.Key_PageDown:
            self.chart().scroll(0, 50)
        elif key == QtCore.Qt.Key_Home:
            self.chart().zoomReset()
        super().keyPressEvent(event)

# This class defines the "Test" window, which is used to show up the visualized measurement results in real-time.
# It's Qt-Designer files are "TestWindow.ui" in folder "uifiles"
class Ui_TestWindow_FS(object):
    def setupUi(self, TestWindow):
        TestWindow.setObjectName("TestWindow")
        TestWindow.setWindowModality(QtCore.Qt.NonModal)
        TestWindow.resize(1613, 866)
        TestWindow.setMinimumSize(QtCore.QSize(1613, 866))
        TestWindow.setMaximumSize(QtCore.QSize(1613, 866))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        TestWindow.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon_materials/7.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        TestWindow.setWindowIcon(icon)

        self.GraphicFrame = QtWidgets.QFrame(TestWindow)
        self.GraphicFrame.setGeometry(QtCore.QRect(20, 70, 1561, 541))
        self.GraphicFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.GraphicFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.GraphicFrame.setObjectName("GraphicFrame")

        # creation of the interactive diagram in the "Test" window
        self.chart_1 = QtChart.QChart()
        self.chart_2 = QtChart.QChart()

        # QtChart.QCategoryAxis *axisX= new QCategoryAxis

        self.__axisFreq = QtChart.QLogValueAxis()
        self.__axisFreq.setLabelFormat("%d")  # format of the label
        self.__axisFreq.setTitleText("Frequenz / kHz \r\n ")
        self.__axisFreq.setRange(100, 100000)
        self.__axisFreq.setMinorTickCount(8)
        # self.__axisFreq.tickAn([ticks])
        self.chart_1.addAxis(self.__axisFreq, QtCore.Qt.AlignBottom)

        self.__axisMag = QtChart.QValueAxis()
        self.__axisMag.setTitleText("Generator - Leistung / dBm  ")

        self.__axisMag.setRange(-35, -0)
        self.__axisMag.setTickCount(8)
        self.__axisMag.setLabelFormat("%d")
        self.chart_1.addAxis(self.__axisMag, QtCore.Qt.AlignLeft)

        self.graphicsView = QmyChartView(self.GraphicFrame)
        self.graphicsView.setGeometry(QtCore.QRect(0, 0, 601, 541))
        self.graphicsView.setRenderHint(QtGui.QPainter.Antialiasing)
        self.graphicsView.setCursor(QtCore.Qt.ArrowCursor)
        self.graphicsView.mouseMove.connect(self.do_chartView_mouseMove)
        self.graphicsView.setChart(self.chart_1)
        self.graphicsView.setObjectName("graphicsView")

        self.graphicsView_2 = QmyChartView(self.GraphicFrame)
        self.graphicsView_2.setGeometry(QtCore.QRect(620, 0, 591, 541))
        self.graphicsView_2.setRenderHint(QtGui.QPainter.Antialiasing)
        self.graphicsView_2.setCursor(QtCore.Qt.ArrowCursor)
        # self.graphicsView_2.mouseMove.connect(self.do_chartView_mouseMove)
        self.graphicsView_2.setChart(self.chart_2)
        self.graphicsView_2.setObjectName("graphicsView_2")

        self.__axisFreq_2 = QtChart.QLogValueAxis()
        self.__axisFreq_2.setLabelFormat("%d")  # format of the label
        self.__axisFreq_2.setTitleText("Frequenz / kHz \r\n ")
        self.__axisFreq_2.setRange(100, 100000)
        self.__axisFreq_2.setMinorTickCount(8)
        # self.__axisFreq.tickAn([ticks])
        self.chart_2.addAxis(self.__axisFreq_2, QtCore.Qt.AlignBottom)

        self.__axisMag_2 = QtChart.QValueAxis()
        self.__axisMag_2.setTitleText("Spannung / V ")
        self.__axisMag_2.setRange(-5, 65)
        self.__axisMag_2.setTickCount(15)
        self.__axisMag_2.setLabelFormat("%d")
        self.chart_2.addAxis(self.__axisMag_2, QtCore.Qt.AlignLeft)

        self.normline1 = QtChart.QLineSeries()
        # self.normline1.setName("Norm Line 1.")
        self.chart_2.addSeries(self.normline1)
        self.normline1.attachAxis(self.__axisFreq_2)
        self.normline1.attachAxis(self.__axisMag_2)
        self.chart_2.legend().markers(self.normline1)[0].setVisible(False)
        pen = QtGui.QPen(QtGui.QColor(45, 130, 255))
        pen.setWidth(3)
        self.normline1.setPen(pen)
        self.normline1.setPointsVisible(False)
        self.normline1.hovered.connect(self.do_series_hovered)
        self.normline1.clicked.connect(self.do_series_clicked)

        self.normline3 = QtChart.QLineSeries()
        # self.normline1.setName("Norm Line 1.")
        self.chart_2.addSeries(self.normline3)
        self.normline3.attachAxis(self.__axisFreq_2)
        self.normline3.attachAxis(self.__axisMag_2)
        self.chart_2.legend().markers(self.normline3)[0].setVisible(False)
        pen = QtGui.QPen(QtGui.QColor(255, 255, 0))
        pen.setWidth(3)
        self.normline3.setPen(pen)
        self.normline3.setPointsVisible(False)
        self.normline3.hovered.connect(self.do_series_hovered)
        self.normline3.clicked.connect(self.do_series_clicked)

        self.x = [150, 1000, 1001, 10000, 10001, 80000]
        self.y = [10, 10, 10, 10, 10, 10]
        # print(y)

        for a, b in zip(self.x, self.y):
            self.normline1.append(a, b)

        self.normline2 = QtChart.QLineSeries()
        # self.normline2.setName("Norm Line 2.")
        self.chart_1.addSeries(self.normline2)
        self.normline2.attachAxis(self.__axisFreq)
        self.normline2.attachAxis(self.__axisMag)
        self.chart_1.legend().markers(self.normline2)[0].setVisible(False)
        pen = QtGui.QPen(QtGui.QColor(45, 130, 255))
        pen.setWidth(3)
        self.normline2.setPen(pen)
        self.normline2.setPointsVisible(False)
        self.normline2.hovered.connect(self.do_series_hovered)
        self.normline2.clicked.connect(self.do_series_clicked)

        self.series_1 = QtChart.QLineSeries()
        # self.series_1.setName("curve_1")
        self.chart_1.addSeries(self.series_1)
        self.series_1.attachAxis(self.__axisFreq)
        self.series_1.attachAxis(self.__axisMag)
        self.chart_1.legend().markers(self.series_1)[0].setVisible(False)
        pen = QtGui.QPen(QtGui.QColor(255, 0, 0))
        pen.setWidth(3)
        self.series_1.setPen(pen)
        self.series_1.setPointsVisible(False)
        self.series_1.hovered.connect(self.do_series_hovered)
        self.series_1.clicked.connect(self.do_series_clicked)

        self.StatusleisteGroupBox = QtWidgets.QGroupBox(self.GraphicFrame)
        self.StatusleisteGroupBox.setGeometry(QtCore.QRect(1230, 0, 331, 531))
        self.StatusleisteGroupBox.setMinimumSize(QtCore.QSize(0, 0))
        self.StatusleisteGroupBox.setMaximumSize(QtCore.QSize(511, 11111))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.StatusleisteGroupBox.setFont(font)
        self.StatusleisteGroupBox.setObjectName("StatusleisteGroupBox")

        self.AktuellerZustandLineEdit = QtWidgets.QLineEdit(self.StatusleisteGroupBox)
        self.AktuellerZustandLineEdit.setGeometry(QtCore.QRect(20, 80, 231, 31))
        self.AktuellerZustandLineEdit.setMinimumSize(QtCore.QSize(231, 31))
        self.AktuellerZustandLineEdit.setMaximumSize(QtCore.QSize(231, 31))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(156, 156, 156))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(156, 156, 156))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        self.AktuellerZustandLineEdit.setPalette(palette)
        self.AktuellerZustandLineEdit.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.AktuellerZustandLineEdit.setText("")
        self.AktuellerZustandLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.AktuellerZustandLineEdit.setReadOnly(True)
        self.AktuellerZustandLineEdit.setObjectName("AktuellerZustandLineEdit")

        self.AktuellerZustandLabel = QtWidgets.QLabel(self.StatusleisteGroupBox)
        self.AktuellerZustandLabel.setGeometry(QtCore.QRect(20, 40, 171, 31))
        self.AktuellerZustandLabel.setMinimumSize(QtCore.QSize(171, 31))
        self.AktuellerZustandLabel.setMaximumSize(QtCore.QSize(171, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.AktuellerZustandLabel.setFont(font)
        self.AktuellerZustandLabel.setObjectName("AktuellerZustandLabel")
        self.InformationenKoordinatenGroupBox = QtWidgets.QGroupBox(self.StatusleisteGroupBox)

        self.InformationenKoordinatenGroupBox.setGeometry(QtCore.QRect(10, 150, 311, 371))
        self.InformationenKoordinatenGroupBox.setMinimumSize(QtCore.QSize(0, 151))
        self.InformationenKoordinatenGroupBox.setMaximumSize(QtCore.QSize(631, 11111))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.InformationenKoordinatenGroupBox.setFont(font)
        self.InformationenKoordinatenGroupBox.setObjectName("InformationenKoordinatenGroupBox")

        self.GeschwebtMagnitudeLineEdit = QtWidgets.QLineEdit(self.InformationenKoordinatenGroupBox)
        self.GeschwebtMagnitudeLineEdit.setGeometry(QtCore.QRect(130, 140, 131, 31))
        self.GeschwebtMagnitudeLineEdit.setMinimumSize(QtCore.QSize(101, 31))
        self.GeschwebtMagnitudeLineEdit.setMaximumSize(QtCore.QSize(131, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.GeschwebtMagnitudeLineEdit.setFont(font)
        self.GeschwebtMagnitudeLineEdit.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.GeschwebtMagnitudeLineEdit.setAlignment(
            QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.GeschwebtMagnitudeLineEdit.setReadOnly(True)
        self.GeschwebtMagnitudeLineEdit.setObjectName("GeschwebtMagnitudeLineEdit")
        self.GeschwebtFrequenzLineEdit = QtWidgets.QLineEdit(self.InformationenKoordinatenGroupBox)

        self.GeschwebtFrequenzLineEdit.setGeometry(QtCore.QRect(130, 90, 131, 31))
        self.GeschwebtFrequenzLineEdit.setMinimumSize(QtCore.QSize(101, 31))
        self.GeschwebtFrequenzLineEdit.setMaximumSize(QtCore.QSize(131, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.GeschwebtFrequenzLineEdit.setFont(font)
        self.GeschwebtFrequenzLineEdit.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.GeschwebtFrequenzLineEdit.setAlignment(
            QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.GeschwebtFrequenzLineEdit.setReadOnly(True)
        self.GeschwebtFrequenzLineEdit.setObjectName("GeschwebtFrequenzLineEdit")

        self.GeschwebtFrequenzLabel = QtWidgets.QLabel(self.InformationenKoordinatenGroupBox)
        self.GeschwebtFrequenzLabel.setGeometry(QtCore.QRect(20, 90, 91, 31))
        self.GeschwebtFrequenzLabel.setMinimumSize(QtCore.QSize(91, 31))
        self.GeschwebtFrequenzLabel.setMaximumSize(QtCore.QSize(91, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.GeschwebtFrequenzLabel.setFont(font)
        self.GeschwebtFrequenzLabel.setObjectName("GeschwebtFrequenzLabel")

        self.GeschwebtMagnitudeLabel = QtWidgets.QLabel(self.InformationenKoordinatenGroupBox)
        self.GeschwebtMagnitudeLabel.setGeometry(QtCore.QRect(20, 140, 101, 31))
        self.GeschwebtMagnitudeLabel.setMinimumSize(QtCore.QSize(101, 31))
        self.GeschwebtMagnitudeLabel.setMaximumSize(QtCore.QSize(101, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.GeschwebtMagnitudeLabel.setFont(font)
        self.GeschwebtMagnitudeLabel.setObjectName("GeschwebtMagnitudeLabel")

        self.GeschwebtLabel = QtWidgets.QLabel(self.InformationenKoordinatenGroupBox)
        self.GeschwebtLabel.setGeometry(QtCore.QRect(10, 40, 111, 31))
        self.GeschwebtLabel.setMinimumSize(QtCore.QSize(111, 31))
        self.GeschwebtLabel.setMaximumSize(QtCore.QSize(111, 31))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.GeschwebtLabel.setFont(font)
        self.GeschwebtLabel.setObjectName("GeschwebtLabel")

        self.GeschwebtToolButton = QtWidgets.QToolButton(self.InformationenKoordinatenGroupBox)
        self.GeschwebtToolButton.setGeometry(QtCore.QRect(130, 40, 31, 31))
        self.GeschwebtToolButton.setMinimumSize(QtCore.QSize(31, 31))
        self.GeschwebtToolButton.setMaximumSize(QtCore.QSize(31, 31))
        self.GeschwebtToolButton.setText("")
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap("icon_materials/9.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.GeschwebtToolButton.setIcon(icon10)
        self.GeschwebtToolButton.setIconSize(QtCore.QSize(31, 31))
        self.GeschwebtToolButton.setStyleSheet("background-color: transparent")
        self.GeschwebtToolButton.setObjectName("GeschwebtToolButton")

        self.GeklicktToolButton = QtWidgets.QToolButton(self.InformationenKoordinatenGroupBox)
        self.GeklicktToolButton.setGeometry(QtCore.QRect(130, 200, 31, 31))
        self.GeklicktToolButton.setMinimumSize(QtCore.QSize(31, 31))
        self.GeklicktToolButton.setMaximumSize(QtCore.QSize(31, 31))
        self.GeklicktToolButton.setText("")
        self.GeklicktToolButton.setIcon(icon10)
        self.GeklicktToolButton.setIconSize(QtCore.QSize(31, 31))
        self.GeklicktToolButton.setStyleSheet("background-color: transparent")
        self.GeklicktToolButton.setObjectName("GeklicktToolButton")

        self.GeklicktMagnitudeLineEdit = QtWidgets.QLineEdit(self.InformationenKoordinatenGroupBox)
        self.GeklicktMagnitudeLineEdit.setGeometry(QtCore.QRect(130, 300, 131, 31))
        self.GeklicktMagnitudeLineEdit.setMinimumSize(QtCore.QSize(101, 31))
        self.GeklicktMagnitudeLineEdit.setMaximumSize(QtCore.QSize(131, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.GeklicktMagnitudeLineEdit.setFont(font)
        self.GeklicktMagnitudeLineEdit.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.GeklicktMagnitudeLineEdit.setAlignment(
            QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.GeklicktMagnitudeLineEdit.setReadOnly(True)
        self.GeklicktMagnitudeLineEdit.setObjectName("GeklicktMagnitudeLineEdit")

        self.GeklicktMagnitudeLabel = QtWidgets.QLabel(self.InformationenKoordinatenGroupBox)
        self.GeklicktMagnitudeLabel.setGeometry(QtCore.QRect(20, 300, 101, 31))
        self.GeklicktMagnitudeLabel.setMinimumSize(QtCore.QSize(101, 31))
        self.GeklicktMagnitudeLabel.setMaximumSize(QtCore.QSize(101, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.GeklicktMagnitudeLabel.setFont(font)
        self.GeklicktMagnitudeLabel.setObjectName("GeklicktMagnitudeLabel")

        self.GeklicktLabel = QtWidgets.QLabel(self.InformationenKoordinatenGroupBox)
        self.GeklicktLabel.setGeometry(QtCore.QRect(10, 200, 81, 31))
        self.GeklicktLabel.setMinimumSize(QtCore.QSize(81, 31))
        self.GeklicktLabel.setMaximumSize(QtCore.QSize(81, 31))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.GeklicktLabel.setFont(font)
        self.GeklicktLabel.setObjectName("GeklicktLabel")

        self.GeklicktFrequenzLabel = QtWidgets.QLabel(self.InformationenKoordinatenGroupBox)
        self.GeklicktFrequenzLabel.setGeometry(QtCore.QRect(20, 250, 91, 31))
        self.GeklicktFrequenzLabel.setMinimumSize(QtCore.QSize(91, 31))
        self.GeklicktFrequenzLabel.setMaximumSize(QtCore.QSize(91, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.GeklicktFrequenzLabel.setFont(font)
        self.GeklicktFrequenzLabel.setObjectName("GeklicktFrequenzLabel")

        self.GeklicktFrequenzLineEdit = QtWidgets.QLineEdit(self.InformationenKoordinatenGroupBox)
        self.GeklicktFrequenzLineEdit.setGeometry(QtCore.QRect(130, 250, 131, 31))
        self.GeklicktFrequenzLineEdit.setMinimumSize(QtCore.QSize(101, 31))
        self.GeklicktFrequenzLineEdit.setMaximumSize(QtCore.QSize(131, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.GeklicktFrequenzLineEdit.setFont(font)
        self.GeklicktFrequenzLineEdit.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.GeklicktFrequenzLineEdit.setAlignment(
            QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.GeklicktFrequenzLineEdit.setReadOnly(True)
        self.GeklicktFrequenzLineEdit.setObjectName("GeklicktFrequenzLineEdit")

        self.MousPositionLabel = QtWidgets.QLabel(self.InformationenKoordinatenGroupBox)
        self.MousPositionLabel.setGeometry(QtCore.QRect(20, 340, 281, 21))
        self.MousPositionLabel.setMinimumSize(QtCore.QSize(0, 21))
        self.MousPositionLabel.setMaximumSize(QtCore.QSize(611, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.MousPositionLabel.setFont(font)
        self.MousPositionLabel.setText("")
        self.MousPositionLabel.setObjectName("MousPositionLabel")

        self.ButtonFrame = QtWidgets.QFrame(TestWindow)
        self.ButtonFrame.setGeometry(QtCore.QRect(-1, 0, 1611, 51))
        self.ButtonFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.ButtonFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.ButtonFrame.setObjectName("ButtonFrame")

        self.OpenFilePushButton = QtWidgets.QToolButton(self.ButtonFrame)
        self.OpenFilePushButton.setGeometry(QtCore.QRect(20, 10, 31, 31))
        self.OpenFilePushButton.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icon_materials/13.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.OpenFilePushButton.setIcon(icon1)
        self.OpenFilePushButton.setIconSize(QtCore.QSize(31, 31))
        self.OpenFilePushButton.setAutoRaise(True)
        self.OpenFilePushButton.setObjectName("OpenFilePushButton")

        self.PrintPushButton = QtWidgets.QToolButton(self.ButtonFrame)
        self.PrintPushButton.setGeometry(QtCore.QRect(60, 10, 31, 31))
        self.PrintPushButton.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icon_materials/19.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.PrintPushButton.setIcon(icon2)
        self.PrintPushButton.setIconSize(QtCore.QSize(31, 31))
        self.PrintPushButton.setAutoRaise(True)
        self.PrintPushButton.setObjectName("PrintPushButton")

        self.HandMovePushButton = QtWidgets.QToolButton(self.ButtonFrame)
        self.HandMovePushButton.setGeometry(QtCore.QRect(120, 10, 31, 31))
        self.HandMovePushButton.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icon_materials/28.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.HandMovePushButton.setIcon(icon3)
        self.HandMovePushButton.setIconSize(QtCore.QSize(31, 31))
        self.HandMovePushButton.setAutoRaise(True)
        self.HandMovePushButton.setObjectName("HandMovePushButton")  # Zoom in Button

        self.pushButton_4 = QtWidgets.QToolButton(self.ButtonFrame)
        self.pushButton_4.setGeometry(QtCore.QRect(160, 10, 31, 31))
        self.pushButton_4.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("icon_materials/29.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.pushButton_4.setIcon(icon4)
        self.pushButton_4.setIconSize(QtCore.QSize(31, 31))
        self.pushButton_4.setAutoRaise(True)
        self.pushButton_4.setObjectName("pushButton_4")

        self.pushButton_5 = QtWidgets.QToolButton(self.ButtonFrame)
        self.pushButton_5.setGeometry(QtCore.QRect(200, 10, 31, 31))
        self.pushButton_5.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("icon_materials/30.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.pushButton_5.setIcon(icon5)
        self.pushButton_5.setIconSize(QtCore.QSize(31, 31))
        self.pushButton_5.setAutoRaise(True)
        self.pushButton_5.setObjectName("pushButton_5")

        self.Line2 = QtWidgets.QFrame(self.ButtonFrame)
        self.Line2.setGeometry(QtCore.QRect(100, 5, 16, 41))
        self.Line2.setCursor(QtGui.QCursor(QtCore.Qt.SizeAllCursor))
        self.Line2.setFrameShape(QtWidgets.QFrame.VLine)
        self.Line2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Line2.setObjectName("Line2")

        self.Line1 = QtWidgets.QFrame(self.ButtonFrame)
        self.Line1.setGeometry(QtCore.QRect(5, 5, 3, 41))
        self.Line1.setCursor(QtGui.QCursor(QtCore.Qt.SizeAllCursor))
        self.Line1.setLineWidth(1)
        self.Line1.setFrameShape(QtWidgets.QFrame.VLine)
        self.Line1.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Line1.setObjectName("Line1")

        self.line3 = QtWidgets.QFrame(self.ButtonFrame)
        self.line3.setGeometry(QtCore.QRect(240, 5, 3, 41))
        self.line3.setCursor(QtGui.QCursor(QtCore.Qt.SizeAllCursor))
        self.line3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line3.setObjectName("line3")

        self.pushButton_6 = QtWidgets.QToolButton(self.ButtonFrame)
        self.pushButton_6.setGeometry(QtCore.QRect(250, 10, 31, 31))
        self.pushButton_6.setMinimumSize(QtCore.QSize(31, 31))
        self.pushButton_6.setMaximumSize(QtCore.QSize(31, 31))
        self.pushButton_6.setText("")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("icon_materials/20.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.pushButton_6.setIcon(icon6)
        self.pushButton_6.setIconSize(QtCore.QSize(31, 31))
        self.pushButton_6.setAutoRaise(True)
        self.pushButton_6.setObjectName("pushButton_6")

        self.pushButton_7 = QtWidgets.QToolButton(self.ButtonFrame)
        self.pushButton_7.setGeometry(QtCore.QRect(290, 10, 31, 31))
        self.pushButton_7.setMinimumSize(QtCore.QSize(31, 31))
        self.pushButton_7.setMaximumSize(QtCore.QSize(31, 31))
        self.pushButton_7.setText("")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("icon_materials/31.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.pushButton_7.setIcon(icon7)
        self.pushButton_7.setIconSize(QtCore.QSize(31, 31))
        self.pushButton_7.setAutoRaise(True)
        self.pushButton_7.setObjectName("pushButton_7")

        self.line4 = QtWidgets.QFrame(TestWindow)
        self.line4.setGeometry(QtCore.QRect(-3, 40, 1621, 20))
        self.line4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line4.setObjectName("line4")

        self.TestKontrollenGroupBox = QtWidgets.QGroupBox(TestWindow)
        self.TestKontrollenGroupBox.setGeometry(QtCore.QRect(1250, 610, 331, 251))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.TestKontrollenGroupBox.setFont(font)
        self.TestKontrollenGroupBox.setObjectName("TestKontrollenGroupBox")

        self.TestStratButton = QtWidgets.QToolButton(self.TestKontrollenGroupBox)
        self.TestStratButton.setGeometry(QtCore.QRect(30, 30, 71, 71))
        self.TestStratButton.setText("")
        self.TestStratButton.setIcon(icon)
        self.TestStratButton.setIconSize(QtCore.QSize(61, 61))
        self.TestStratButton.setObjectName("TestStratButton")

        self.TestPausePushButton = QtWidgets.QToolButton(self.TestKontrollenGroupBox)
        self.TestPausePushButton.setGeometry(QtCore.QRect(130, 30, 71, 71))
        self.TestPausePushButton.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("icon_materials/18.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.TestPausePushButton.setIcon(icon4)
        self.TestPausePushButton.setIconSize(QtCore.QSize(61, 61))
        self.TestPausePushButton.setObjectName("TestPausePushButton")

        self.TestStopPushButton = QtWidgets.QToolButton(self.TestKontrollenGroupBox)
        self.TestStopPushButton.setGeometry(QtCore.QRect(230, 30, 71, 71))
        self.TestStopPushButton.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("icon_materials/21.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.TestStopPushButton.setIcon(icon5)
        self.TestStopPushButton.setIconSize(QtCore.QSize(61, 61))
        self.TestStopPushButton.setObjectName("TestStopPushButton")

        self.TestStartButtonLabel = QtWidgets.QLabel(self.TestKontrollenGroupBox)
        self.TestStartButtonLabel.setGeometry(QtCore.QRect(42, 100, 51, 21))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.TestStartButtonLabel.setFont(font)
        self.TestStartButtonLabel.setObjectName("TestStartButtonLabel")

        self.TestPauseButtonLabel = QtWidgets.QLabel(self.TestKontrollenGroupBox)
        self.TestPauseButtonLabel.setGeometry(QtCore.QRect(140, 100, 55, 21))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.TestPauseButtonLabel.setFont(font)
        self.TestPauseButtonLabel.setObjectName("TestPauseButtonLabel")

        self.TestStopButtonLabel = QtWidgets.QLabel(self.TestKontrollenGroupBox)
        self.TestStopButtonLabel.setGeometry(QtCore.QRect(244, 100, 44, 21))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.TestStopButtonLabel.setFont(font)
        self.TestStopButtonLabel.setObjectName("TestStopButtonLabel")

        self.DatenExportierenToolButton = QtWidgets.QToolButton(self.TestKontrollenGroupBox)
        self.DatenExportierenToolButton.setGeometry(QtCore.QRect(30, 130, 271, 31))
        self.DatenExportierenToolButton.setMinimumSize(QtCore.QSize(271, 31))
        self.DatenExportierenToolButton.setMaximumSize(QtCore.QSize(271, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.DatenExportierenToolButton.setFont(font)
        self.DatenExportierenToolButton.setObjectName("DatenExportierenToolButton")
        self.DatenExportierenToolButton.setEnabled(False)  # at first can't click

        self.DatenLoeschenToolButton = QtWidgets.QToolButton(self.TestKontrollenGroupBox)
        self.DatenLoeschenToolButton.setGeometry(QtCore.QRect(30, 170, 271, 31))
        self.DatenLoeschenToolButton.setMinimumSize(QtCore.QSize(271, 31))
        self.DatenLoeschenToolButton.setMaximumSize(QtCore.QSize(271, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.DatenLoeschenToolButton.setFont(font)
        self.DatenLoeschenToolButton.setObjectName("DatenLoeschenToolButton")
        self.DatenLoeschenToolButton.setEnabled(False)

        self.ReportGenerierenToolButton = QtWidgets.QToolButton(self.TestKontrollenGroupBox)
        self.ReportGenerierenToolButton.setGeometry(QtCore.QRect(30, 210, 271, 31))
        self.ReportGenerierenToolButton.setMinimumSize(QtCore.QSize(271, 31))
        self.ReportGenerierenToolButton.setMaximumSize(QtCore.QSize(271, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.ReportGenerierenToolButton.setFont(font)
        self.ReportGenerierenToolButton.setObjectName("ReportGenerierenToolButton")
        self.ReportGenerierenToolButton.setEnabled(False)

        self.StatusFrames = QtWidgets.QFrame(TestWindow)
        self.StatusFrames.setGeometry(QtCore.QRect(29, 610, 1191, 241))
        self.StatusFrames.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.StatusFrames.setFrameShadow(QtWidgets.QFrame.Raised)
        self.StatusFrames.setObjectName("StatusFrames")

        self.StatusGroupBox = QtWidgets.QGroupBox(TestWindow)
        self.StatusGroupBox.setGeometry(QtCore.QRect(20, 630, 1211, 231))
        self.StatusGroupBox.setObjectName("StatusGroupBoxs")

        self.StatusProgressBar = QtWidgets.QProgressBar(self.StatusGroupBox)
        self.StatusProgressBar.setGeometry(QtCore.QRect(520, 50, 641, 41))
        self.StatusProgressBar.setProperty("value", 0)
        self.StatusProgressBar.setObjectName("StatusProgressBar")

        self.TestStatusLabel = QtWidgets.QLabel(self.StatusGroupBox)
        self.TestStatusLabel.setGeometry(QtCore.QRect(520, 10, 221, 31))
        self.TestStatusLabel.setObjectName("TestStatusLabel")

        self.TestStatusLabel_3 = QtWidgets.QLabel(self.StatusGroupBox)
        self.TestStatusLabel_3.setGeometry(QtCore.QRect(290, 10, 221, 31))
        self.TestStatusLabel_3.setObjectName("TestStatusLabel_3")

        self.toolButton = QtWidgets.QToolButton(self.StatusGroupBox)
        self.toolButton.setGeometry(QtCore.QRect(90, 200, 111, 31))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        self.toolButton.setFont(font)
        self.toolButton.setObjectName("toolButton")

        self.toolButton_2 = QtWidgets.QToolButton(self.StatusGroupBox)
        self.toolButton_2.setGeometry(QtCore.QRect(340, 200, 111, 31))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        self.toolButton.setFont(font)
        self.toolButton_2.setObjectName("toolButton_2")

        self.KurveDiagramm_2 = QtWidgets.QTableWidget(self.StatusGroupBox)
        self.KurveDiagramm_2.setGeometry(QtCore.QRect(300, 40, 177, 141))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        self.KurveDiagramm_2.setFont(font)
        self.KurveDiagramm_2.setObjectName("KurveDiagramm_2")
        self.KurveDiagramm_2.setColumnCount(1)
        self.KurveDiagramm_2.setRowCount(1)
        item = QtWidgets.QTableWidgetItem()
        self.KurveDiagramm_2.setHorizontalHeaderItem(0, item)
        self.KurveDiagramm_2.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.KurveDiagramm_2.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeToContents)
        self.KurveDiagramm_2.verticalHeader().setVisible(False)

        self.anfangF = QtWidgets.QLineEdit()
        self.anfangF.setValidator(QtGui.QIntValidator())
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        self.anfangF.setFont(font)
        self.anfangF.setAcceptDrops(False)
        self.anfangF.setMaxLength(6)
        self.anfangF.setClearButtonEnabled(True)
        self.anfangF.setToolTip("Bitte Integral hier eingeben.")
        self.anfangF.setObjectName("anfangF")
        self.anfangF.setPlaceholderText("Standardwert: 150 ")
        self.anfangF.setAlignment(QtCore.Qt.AlignCenter)
        self.KurveDiagramm_2.setCellWidget(0, 0, self.anfangF)

        self.KurveDiagramm = QtWidgets.QTableWidget(self.StatusGroupBox)
        self.KurveDiagramm.setGeometry(QtCore.QRect(10, 40, 277, 141))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        self.KurveDiagramm.setFont(font)
        self.KurveDiagramm.setObjectName("KurveDiagramm")
        self.KurveDiagramm.setColumnCount(2)
        self.KurveDiagramm.setRowCount(3)
        self.KurveDiagramm.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.KurveDiagramm.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeToContents)
        self.KurveDiagramm.verticalHeader().setVisible(False)

        self.fre1 = QtWidgets.QLabel()
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        self.fre1.setFont(font)
        self.fre1.setObjectName("fre1")
        self.fre1.setText("0.15 -> 1")
        self.fre1.setAlignment(QtCore.Qt.AlignCenter)
        self.KurveDiagramm.setCellWidget(0, 0, self.fre1)

        self.fre2 = QtWidgets.QLabel()
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        self.fre2.setFont(font)
        self.fre2.setObjectName("fre2")
        self.fre2.setText("1 -> 10")
        self.fre2.setAlignment(QtCore.Qt.AlignCenter)
        self.KurveDiagramm.setCellWidget(1, 0, self.fre2)

        self.fre3 = QtWidgets.QLabel()
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        self.fre3.setFont(font)
        self.fre3.setObjectName("fre3")
        self.fre3.setText("10 -> 80")
        self.fre3.setAlignment(QtCore.Qt.AlignCenter)
        self.KurveDiagramm.setCellWidget(2, 0, self.fre3)

        self.vol1 = QtWidgets.QLineEdit()
        self.vol1.setValidator(QtGui.QIntValidator())
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        self.vol1.setFont(font)
        self.vol1.setAcceptDrops(False)
        self.vol1.setMaxLength(2)
        self.vol1.setClearButtonEnabled(True)
        self.vol1.setToolTip("Bitte Integral hier eingeben.")
        self.vol1.setObjectName("vol1")
        self.vol1.setPlaceholderText("Standardwert: 10 ")
        self.vol1.setAlignment(QtCore.Qt.AlignCenter)
        self.KurveDiagramm.setCellWidget(0, 1, self.vol1)

        self.vol2 = QtWidgets.QLineEdit()
        self.vol2.setValidator(QtGui.QIntValidator())
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        self.vol2.setFont(font)
        self.vol2.setAcceptDrops(False)
        self.vol2.setMaxLength(2)
        self.vol2.setClearButtonEnabled(True)
        self.vol2.setToolTip("Bitte Integral hier eingeben.")
        self.vol2.setObjectName("vol2")
        self.vol2.setPlaceholderText("Standardwert: 10")
        self.vol2.setAlignment(QtCore.Qt.AlignCenter)
        self.KurveDiagramm.setCellWidget(1, 1, self.vol2)

        self.vol3 = QtWidgets.QLineEdit()
        self.vol3.setValidator(QtGui.QIntValidator())
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        self.vol3.setFont(font)
        self.vol3.setAcceptDrops(False)
        self.vol3.setMaxLength(2)
        self.vol3.setClearButtonEnabled(True)
        self.vol3.setToolTip("Bitte Integral hier eingeben.")
        self.vol3.setObjectName("vol3")
        self.vol3.setPlaceholderText("Standardwert: 10")
        self.vol3.setAlignment(QtCore.Qt.AlignCenter)
        self.KurveDiagramm.setCellWidget(2, 1, self.vol3)

        item = QtWidgets.QTableWidgetItem()
        self.KurveDiagramm.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        item.setFont(font)
        self.KurveDiagramm.setHorizontalHeaderItem(1, item)

        self.TestStatusLabel_2 = QtWidgets.QLabel(self.StatusGroupBox)
        self.TestStatusLabel_2.setGeometry(QtCore.QRect(10, 10, 221, 31))
        self.TestStatusLabel_2.setObjectName("TestStatusLabel_2")

        self.retranslateUi(TestWindow)
        QtCore.QMetaObject.connectSlotsByName(TestWindow)

        # define signals
        self.OpenFilePushButton.clicked.connect(self.on_actOpen_triggered)
        self.PrintPushButton.clicked.connect(self.handle_print)
        self.HandMovePushButton.clicked.connect(self.on_actZoomIn_triggered)
        # self.HandMovePushButton.clicked.connect(self.hide_line_labels)
        self.pushButton_4.clicked.connect(self.on_actZoomOut_triggered)
        # self.pushButton_4.clicked.connect(self.hide_line_labels)
        self.pushButton_5.clicked.connect(self.on_actZoomReset_triggered)
        self.pushButton_5.clicked.connect(self.show_line_labels)
        self.TestStratButton.clicked.connect(self.start_thread)
        self.TestPausePushButton.clicked.connect(self.clicked_pause)
        self.TestStopPushButton.clicked.connect(self.clicked_stop)
        self.pushButton_7.clicked.connect(self._clearall)
        self.ReportGenerierenToolButton.clicked.connect(self.create_word_report)
        self.graphicsView.rubberBandChanged.connect(self.hide_line_labels)
        self.DatenExportierenToolButton.clicked.connect(self.daten_exportieren)
        self.toolButton.clicked.connect(self.drawSollSpannung)

        # define the background color of the window
        pale = QtGui.QPalette()
        pale.setColor(QtGui.QPalette.Background, QtGui.QColor(248, 248, 248))
        TestWindow.setPalette(pale)

    def retranslateUi(self, TestWindow):
        _translate = QtCore.QCoreApplication.translate
        TestWindow.setWindowTitle(_translate("TestWindow", "Feldgebundene Störfestigkeit"))
        self.StatusleisteGroupBox.setTitle(_translate("TestWindow", "Statusleiste"))
        self.AktuellerZustandLabel.setText(_translate("TestWindow", "Aktueller Zustand:"))
        self.InformationenKoordinatenGroupBox.setTitle(_translate("TestWindow", "Informationen der Koordinaten"))
        self.GeschwebtFrequenzLabel.setText(_translate("TestWindow", "Frequenz:"))
        self.GeschwebtMagnitudeLabel.setText(_translate("TestWindow", "Magnitude:"))
        self.GeschwebtLabel.setText(_translate("TestWindow", "Geschwebt"))
        self.GeklicktMagnitudeLabel.setText(_translate("TestWindow", "Magnitude:"))
        self.GeklicktLabel.setText(_translate("TestWindow", "Geklickt"))
        self.GeklicktFrequenzLabel.setText(_translate("TestWindow", "Frequenz:"))
        self.pushButton_4.setText(_translate("TestWindow", "PushButton"))
        self.pushButton_5.setText(_translate("TestWindow", "PushButton"))
        self.TestKontrollenGroupBox.setTitle(_translate("TestWindow", "Testkontrollen"))
        self.TestStartButtonLabel.setText(_translate("TestWindow", "Start"))
        self.TestPauseButtonLabel.setText(_translate("TestWindow", "Pause"))
        self.TestStopButtonLabel.setText(_translate("TestWindow", "Stop"))
        self.DatenExportierenToolButton.setText(_translate("TestWindow", "Daten exportieren"))
        self.DatenLoeschenToolButton.setText(_translate("TestWindow", "Daten löschen"))
        self.ReportGenerierenToolButton.setText(_translate("TestWindow", "Report generieren"))
        self.TestStatusLabel.setText(_translate("TestWindow", "Status: Leerlauf "))
        item = self.KurveDiagramm.horizontalHeaderItem(0)
        item.setText(_translate("TestWindow", "Frequenz / MHz"))
        item = self.KurveDiagramm_2.horizontalHeaderItem(0)
        item.setText(_translate("TestWindow", "Anfangsfrequenz / kHz"))
        item = self.KurveDiagramm.horizontalHeaderItem(1)
        item.setText(_translate("TestWindow", "Spannung / V"))
        self.TestStatusLabel_2.setText(_translate("TestWindow", "Einstellung der Soll_Spannung"))
        self.TestStatusLabel_3.setText(_translate("TestWindow", "Einstellung der Anfangsfrequenz"))
        self.toolButton.setText(_translate("TestWindow", "ok"))
        self.toolButton_2.setText(_translate("TestWindow", "ok"))

    # from qchartview import QChartView
    def _clearall(self):
        # self.chart.removeAllSeries()
        self.normline1.clear()

    # when mouse is moving on a curve, the coordinates of the spot, where the mouse is pointing to, on the curve
    # will be showed in the Status bar
    def do_series_hovered(self, point, state):
        if state:
            horizontal_coor = "%.2f kHz" % point.x()
            vertical_coor = "%.2f dBμV/m" % point.y()
            self.GeschwebtFrequenzLineEdit.setText(horizontal_coor)
            self.GeschwebtMagnitudeLineEdit.setText(vertical_coor)

    # when mouse clicks a spot on a curve, the coordinates of the spot will be showed in the Status bar
    def do_series_clicked(self, point):
        horizontal_coor = "%.2f MHz" % point.x()
        vertical_coor = "%.2f dBμV/m" % point.y()
        self.GeklicktFrequenzLineEdit.setText(horizontal_coor)
        self.GeklicktMagnitudeLineEdit.setText(vertical_coor)

    # the current coordinates of the mouse will be showed continously in the status bar in real-time
    def do_chartView_mouseMove(self, point):
        pt = self.graphicsView.chart().mapToValue(point)
        self.MousPositionLabel.setText("Chart X=%.2f,Y=%.2f" % (pt.x(), pt.y()))

        # when the button "Pause" is clicked, the measuring process will take a break

    # at the same time, the status bar will show that the test process is in a pause
    def clicked_pause(self):
        self.calc.signal += 1
        # self.KurveDiagramm.setEnabled(False)
        if (self.calc.signal & 1) == 0:

            self.TestPausePushButton.setAutoRaise(False)
            self.DatenExportierenToolButton.setEnabled(True)
            self.ReportGenerierenToolButton.setEnabled(True)
            self.KurveDiagramm.setEnabled(False)
            # self.calc.quit()
            time.sleep(1)
            self.AktuellerZustandLineEdit.setText("Test unterbrochen! ")
        elif (self.calc.signal & 1) == 1:
            self.TestPausePushButton.setAutoRaise(True)
            self.AktuellerZustandLineEdit.setText("Test läuft!")
            self.KurveDiagramm.setEnabled(False)

            self.TestStatusLabel.setText("Status: %s (%s)" % (
                self.AktuellerZustandLineEdit.text(), time.strftime("%d.%m.%Y %H:%M:%S", time.localtime())))
            self.calc = External_FS(AnfangF=self.calc.Anfangsfrequency, frequenz_S=self.x, Spannung=self.y,
                                    frequenz_L=self.F1, Leistung=self.M1)
            self.calc.signal = 1
            self.calc.countChanged.connect(self.onCountChanged)
            self.calc.start()

    # when the button "Stop" is clicked, the test process stops immediately
    # at the same time, the status bar will show that the test process is over/done
    def clicked_stop(self):
        self.calc.signal += 1
        self.TestStratButton.setEnabled(True)
        self.KurveDiagramm.setEnabled(True)
        self.AktuellerZustandLineEdit.setText("Test Stop! ")

    # connected to the device driver
    # once the button "Start" is clicked, the test process will begin
    # parameter muss neu definieren
    def start_thread(self):
        if self.anfangF.text() == "":
            # self.vol1.setText('10')
            AnfangF = 150

        else:
            AnfangF = int(self.anfangF.text())
        # self.TestStatusLabel.setText
        # ("Status: %s (%s)" % (self.AktuellerZustandLineEdit.text(),time.strftime("%d.%m.%Y %H:%M:%S", time.localtime())))
        self.calc = External_FS(AnfangF=AnfangF, frequenz_S=self.x, Spannung=self.y, frequenz_L=self.F1,
                                Leistung=self.M1)
        self.calc.start()
        self.calc.signal = 1
        self.calc.countChanged.connect(self.onCountChanged)

    # Export measurement data.
    def daten_exportieren(self):
        if self.curve1.isChecked() == False and \
                self.curve2.isChecked() == False and \
                self.curve3.isChecked() == False and \
                self.curve4.isChecked() == False:
            messageBox = QtWidgets.QMessageBox()
            messageBox.setWindowTitle('Kurvenauswahl')
            messageBox.setIcon(QtWidgets.QMessageBox.Warning)
            messageBox.setWindowIcon(QtGui.QIcon('./icon_materials/8.png'))
            messageBox.setText(
                'Bitte wählen Sie zuerst eine Kurve aus!')
            messageBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
            buttonY = messageBox.button(QtWidgets.QMessageBox.Ok)
            buttonY.setText('Ok')
            messageBox.exec_()
        else:
            if self.curve1.isChecked() == True and self.series_1 is not None:
                fileName, _ = QtWidgets.QFileDialog.getSaveFileName(None, 'Messergebnisse speichern', 'd:\\',
                                                                    'Ergebnisse (*.txt)')
                f = open(fileName, "a")
                detektor = self.detektor1.currentText()
                f.write('Detektor: %s' % detektor)
                f.write('\t')
                attenuation = self.antten1.text()
                f.write('Attenuation: %s dB' % attenuation)
                f.write('\t')
                messtime = self.messtime1.text()
                f.write('Messzeit: %s ms' % messtime)
                f.write('\t')
                Startfre = self.startfre1.text()
                f.write('Startfrequenz: %s MHz' % Startfre)
                f.write('\n')
                f.write('Frequenz: MHz')
                f.write('\t')
                f.write('Feldstärke: dBuV/m')
                f.write('\n')
                for fre, mag in self.series_1:
                    f.write(fre)
                    f.write('\t')
                    f.write(mag)
                    f.write('\n')
                messageBox = QtWidgets.QMessageBox()
                messageBox.setWindowTitle('Hinweis')
                messageBox.setIcon(QtWidgets.QMessageBox.Information)
                messageBox.setWindowIcon(QtGui.QIcon('./icon_materials/3.png'))
                messageBox.setText('Die Daten werden erfolgreich exportiert!')
                messageBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
                buttonY = messageBox.button(QtWidgets.QMessageBox.Ok)
                buttonY.setText('Ok')
                messageBox.exec_()
            elif self.curve2.isChecked() == True and self.series_2 is not None:
                fileName, _ = QtWidgets.QFileDialog.getSaveFileName(None, 'Messergebnisse speichern', 'd:\\',
                                                                    'Ergebnisse (*.txt)')
                f = open(fileName, "a")
                detektor = self.detektor2.currentText()
                f.write('Detektor: %s' % detektor)
                f.write('\t')
                attenuation = self.antten2.text()
                f.write('Attenuation: %s dB' % attenuation)
                f.write('\t')
                messtime = self.messtime2.text()
                f.write('Messzeit: %s ms' % messtime)
                f.write('\t')
                Startfre = self.startfre2.text()
                f.write('Startfrequenz: %s MHz' % Startfre)
                f.write('\n')
                f.write('Frequenz: MHz')
                f.write('\t')
                f.write('Feldstärke: dBuV/m')
                f.write('\n')
                for fre, mag in self.series_2:
                    f.write(fre)
                    f.write('\t')
                    f.write(mag)
                    f.write('\n')
                messageBox = QtWidgets.QMessageBox()
                messageBox.setWindowTitle('Hinweis')
                messageBox.setIcon(QtWidgets.QMessageBox.Information)
                messageBox.setWindowIcon(QtGui.QIcon('./icon_materials/3.png'))
                messageBox.setText('Die Daten werden erfolgreich exportiert!')
                messageBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
                buttonY = messageBox.button(QtWidgets.QMessageBox.Ok)
                buttonY.setText('Ok')
                messageBox.exec_()

            elif self.curve3.isChecked() == True and self.series_3 is not None:
                fileName, _ = QtWidgets.QFileDialog.getSaveFileName(None, 'Messergebnisse speichern', 'd:\\',
                                                                    'Ergebnisse (*.txt)')
                f = open(fileName, "a")
                detektor = self.detektor3.currentText()
                f.write('Detektor: %s' % detektor)
                f.write('\t')
                attenuation = self.antten3.text()
                f.write('Attenuation: %s dB' % attenuation)
                f.write('\t')
                messtime = self.messtime3.text()
                f.write('Messzeit: %s ms' % messtime)
                f.write('\t')
                Startfre = self.startfre3.text()
                f.write('Startfrequenz: %s MHz' % Startfre)
                f.write('\n')
                f.write('Frequenz: MHz')
                f.write('\t')
                f.write('Feldstärke: dBuV/m')
                f.write('\n')
                for fre, mag in self.series_3:
                    f.write(fre)
                    f.write('\t')
                    f.write(mag)
                    f.write('\n')
                messageBox = QtWidgets.QMessageBox()
                messageBox.setWindowTitle('Hinweis')
                messageBox.setIcon(QtWidgets.QMessageBox.Information)
                messageBox.setWindowIcon(QtGui.QIcon('./icon_materials/3.png'))
                messageBox.setText('Die Daten werden erfolgreich exportiert!')
                messageBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
                buttonY = messageBox.button(QtWidgets.QMessageBox.Ok)
                buttonY.setText('Ok')
                messageBox.exec_()
            elif self.curve4.isChecked() == True and self.series_4 is not None:
                fileName, _ = QtWidgets.QFileDialog.getSaveFileName(None, 'Messergebnisse speichern', 'd:\\',
                                                                    'Ergebnisse (*.txt)')
                f = open(fileName, "a")
                detektor = self.detektor4.currentText()
                f.write('Detektor: %s' % detektor)
                f.write('\t')
                attenuation = self.antten4.text()
                f.write('Attenuation: %s dB' % attenuation)
                f.write('\t')
                messtime = self.messtime4.text()
                f.write('Messzeit: %s ms' % messtime)
                f.write('\t')
                Startfre = self.startfre4.text()
                f.write('Startfrequenz: %s MHz' % Startfre)
                f.write('\n')
                f.write('Frequenz: MHz')
                f.write('\t')
                f.write('Feldstärke: dBuV/m')
                f.write('\n')
                for fre, mag in self.series_4:
                    f.write(fre)
                    f.write('\t')
                    f.write(mag)
                    f.write('\n')
                messageBox = QtWidgets.QMessageBox()
                messageBox.setWindowTitle('Hinweis')
                messageBox.setIcon(QtWidgets.QMessageBox.Information)
                messageBox.setWindowIcon(QtGui.QIcon('./icon_materials/3.png'))
                messageBox.setText('Die Daten werden erfolgreich exportiert!')
                messageBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
                buttonY = messageBox.button(QtWidgets.QMessageBox.Ok)
                buttonY.setText('Ok')
                messageBox.exec_()

    # by clicking the "Report generieren" button, a test report will be generated automatically
    def create_word_report(self):
        pix = self.graphicsView.grab()
        image = pix.toImage()
        image = qimage2ndarray.rgb_view(image, byteorder='little')
        savepath = 'D:/demo.png'
        cv.imwrite(savepath, image)
        WordReportGenerator.generate_word(savepath)
        # os.remove(savepath)
        messageBox = QtWidgets.QMessageBox()
        messageBox.setWindowTitle('Report')
        messageBox.setIcon(QtWidgets.QMessageBox.Information)
        messageBox.setWindowIcon(QtGui.QIcon('./icon_materials/8.png'))
        messageBox.setText('Der Word-Report wird erfolgreich generiert!')
        messageBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
        buttonY = messageBox.button(QtWidgets.QMessageBox.Ok)
        buttonY.setText('Ok')
        messageBox.exec_()

    # change the color of the 1. curve
    def KurvenLinenFarbe_clicked1(self):
        color = QtWidgets.QColorDialog.getColor()
        if color.isValid():
            qss = "background-color: rgb(%d, %d, %d);" % (
                color.red(), color.green(), color.blue())
            self.curvecolor1.setStyleSheet(qss)

    # change the color of the 2. curve
    def KurvenLinenFarbe_clicked2(self):
        color = QtWidgets.QColorDialog.getColor()
        if color.isValid():
            qss = "background-color: rgb(%d, %d, %d);" % (
                color.red(), color.green(), color.blue())
            self.curvecolor2.setStyleSheet(qss)

    # change the color of the 3. curve
    def KurvenLinenFarbe_clicked3(self):
        color = QtWidgets.QColorDialog.getColor()
        if color.isValid():
            qss = "background-color: rgb(%d, %d, %d);" % (
                color.red(), color.green(), color.blue())
            self.curvecolor3.setStyleSheet(qss)

    # change the color of the 4. curve
    def KurvenLinenFarbe_clicked4(self):
        color = QtWidgets.QColorDialog.getColor()
        if color.isValid():
            qss = "background-color: rgb(%d, %d, %d);" % (
                color.red(), color.green(), color.blue())
            self.curvecolor4.setStyleSheet(qss)

    # click the first button on the left upper corner to import old testing data into the test window.
    def on_actOpen_triggered(self):
        curPath = QtCore.QDir.currentPath()
        filename, flt = QtWidgets.QFileDialog.getOpenFileName(None, "Eine Datei öffnen", curPath, "Testdaten (*.txt)")
        if (filename == ""):
            return

        aFile = open(filename, 'r')
        allLine = aFile.readlines()
        aFile.close()
        fileInfo = QtCore.QFileInfo(filename)
        QtCore.QDir.setCurrent(fileInfo.absolutePath())

        self.__loadData(allLine)

    # the imported old data is visualized by this method
    def __loadData(self, allLines):
        # self.chart.removeAllSeries()
        rowCnt = len(allLines) - 1  # 文本行数
        vectF = [0] * rowCnt
        vectMag = [0] * rowCnt
        for i in range(rowCnt):
            lineText = allLines[i].strip()
            strList = lineText.split()
            vectF[i] = float(strList[0][:-3])
            vectMag[i] = float(strList[1].replace(",", "."))

        pen = QtGui.QPen(QtGui.QColor(255, 109, 109))
        pen.setWidth(1)
        seriesF = QtChart.QLineSeries()
        seriesF.setName("Alte Kurve")
        seriesF.setPen(pen)
        seriesF.setPointsVisible(False)
        seriesF.hovered.connect(self.do_series_hovered)
        seriesF.clicked.connect(self.do_series_clicked)

        count = len(vectF)
        for i in range(count):
            seriesF.append(vectF[i], vectMag[i])
        self.chart.addSeries(seriesF)
        self.chart.setAxisX(self.__axisFreq, seriesF)
        self.chart.setAxisY(self.__axisMag, seriesF)

    # related to the printer functions
    def handle_print(self):
        printer = QPrinter(QPrinter.HighResolution)
        dialog = QPrintDialog(printer, None)
        if dialog.exec_() == QPrintDialog.Accepted:
            self.handle_paint_request(printer)

    # open the printer window
    def handle_preview(self):
        dialog = QPrintPreviewDialog()
        dialog.paintRequested.connect(self.handle_paint_request)
        dialog.exec_()

    # confirmation of the print requirement and print the diagramm
    def handle_paint_request(self, printer):
        painter = QtGui.QPainter(printer)
        painter.setViewport(self.graphicsView.rect())
        painter.setWindow(self.graphicsView.rect())
        self.graphicsView.render(painter)
        painter.end()

        # when the diagramm is printed successfully, an information messageBox will appear and
        # tell users that the diagramm is printed successfully.
        messageBox = QtWidgets.QMessageBox()
        messageBox.setWindowTitle('Drucker')
        messageBox.setIcon(QtWidgets.QMessageBox.Information)
        messageBox.setWindowIcon(QtGui.QIcon('./icon_materials/8.png'))
        messageBox.setText('Das Diagramm wird erfolgreich ausgedrukt!')
        messageBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
        buttonY = messageBox.button(QtWidgets.QMessageBox.Ok)
        buttonY.setText('Ok')
        messageBox.exec_()

    # zoom out the diagram
    def on_actZoomIn_triggered(self):
        self.graphicsView.chart().zoom(1.2)

    # zoom in the diagram
    def on_actZoomOut_triggered(self):
        self.graphicsView.chart().zoom(0.8)

    # reset the diagram into original size
    def on_actZoomReset_triggered(self):
        self.graphicsView.chart().zoomReset()

    # used to update the diagram
    def onCountChanged(self, value, num, spannung):
        frequenz = value
        magnitude = num
        Sollspannung = spannung
        self.series_1.append(frequenz, magnitude)
        self.normline3.append(frequenz, Sollspannung)

    # draw curves for the Soll-Spannung
    def drawSollSpannung(self):

        self.normline1.clear()
        x = [150, 1000, 1001, 10000, 10001, 80000]
        y = [0, 0, 0, 0, 10, 10]

        if self.vol1.text() == "":
            # self.vol1.setText('10')
            Spannung1 = 10
        else:
            Spannung1 = int(self.vol1.text())
        if self.vol2.text() == "":
            Spannung2 = 10
        else:
            Spannung2 = int(self.vol2.text())
        if self.vol3.text() == "":
            Spannung3 = 10
        else:
            Spannung3 = int(self.vol3.text())

        print(Spannung3)
        self.x = [150, 1000, 1001, 10000, 10001, 80000]
        self.y = [Spannung1, Spannung1, Spannung2, Spannung2, Spannung3, Spannung3]

        for a, b in zip(self.x, self.y):
            self.normline1.append(a, b)

    # draw curves for the marginal values (Grenzwerte) of the norms
    def drawnormlimit(self, norm):
        self.data = []
        for i in range(len(norm)):
            a = norm[i].text()
            self.data.append(a)
        if 'CDN' in self.data:
            aFile = open('./data/Kalib.Wert_CDN.TXT', 'r')
            allLines = aFile.readlines()
            aFile.close()
            rowCnt1 = len(allLines) - 1
            self.F1 = [0] * rowCnt1
            self.M1 = [0] * rowCnt1

            for i1 in range(rowCnt1):
                lineText = allLines[i1].strip()  # A line of text that must be stripped of the \n at the end
                lineText1 = lineText.replace("(", "")
                lineText2 = lineText1.replace(")", "")
                strList1 = lineText2.split()  # Splitting into string lists
                self.F1[i1] = float(strList1[0].replace(",", "")) * 1000
                self.M1[i1] = float(strList1[1].replace(",", ""))
            for a, b in zip(self.F1, self.M1):
                self.normline2.append(a, b)
            self.normline2.show()

        if 'Koppelzange' in self.data:
            print(222)
            aFile = open('./data/Kalib.Wert_KZANGE.TXT', 'r')
            allLines = aFile.readlines()
            # print(allLines)
            aFile.close()
            rowCnt1 = len(allLines) - 1
            self.F1 = [0] * rowCnt1
            self.M1 = [0] * rowCnt1

            for i1 in range(rowCnt1):
                lineText = allLines[i1].strip()  # A line of text that must be stripped of the \n at the end
                lineText1 = lineText.replace("(", "")
                lineText2 = lineText1.replace(")", "")
                strList1 = lineText2.split()  # Splitting into string lists
                self.F1[i1] = float(strList1[0].replace(",", "")) * 1000
                self.M1[i1] = float(strList1[1].replace(",", ""))

            for a, b in zip(self.F1, self.M1):
                self.normline2.append(a, b)
            self.normline2.show()

        if "Kopplungseinrichtung:" in self.data:
            messageBox = QtWidgets.QMessageBox()
            messageBox.setWindowTitle('Mangel an Kopplungseinrichtung')
            messageBox.setIcon(QtWidgets.QMessageBox.Warning)
            messageBox.setWindowIcon(QtGui.QIcon('./icon_materials/8.png'))
            messageBox.setText(
                'Bitte wählen Sie die richtige Kopplungseinrichtung')
            messageBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
            buttonY = messageBox.button(QtWidgets.QMessageBox.Ok)
            buttonY.setText('Ok')
            messageBox.exec_()
        if "" in self.data:
            messageBox = QtWidgets.QMessageBox()
            messageBox.setWindowTitle('Mangel an Kopplungseinrichtung')
            messageBox.setIcon(QtWidgets.QMessageBox.Warning)
            messageBox.setWindowIcon(QtGui.QIcon('./icon_materials/8.png'))
            messageBox.setText(
                'Bitte wählen Sie die richtige Kopplungseinrichtung')
            messageBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
            buttonY = messageBox.button(QtWidgets.QMessageBox.Ok)
            buttonY.setText('Ok')
            messageBox.exec_()

    # hide all curve labels of the marginal values (Grenzwerte)
    def hide_line_labels(self):
        self.label1.hide()
        self.label2.hide()
        self.label3.hide()
        self.label4.hide()
        self.label5.hide()
        self.label6.hide()

    # show all curve labels of the marginal values (Grenzwerte)
    def show_line_labels(self):
        if 'Gruppe 1 (>20kVA). Klasse A. Quasi-Peak. 3m.' in self.data:
            self.label1.show()
        if 'Gruppe 1 (<=20kVA). Klasse A. Quasi-Peak. 3m.' in self.data:
            self.label2.show()
        if "Gruppe 1 (>20kVA). Klasse A. Quasi-Peak. 10m." in self.data:
            self.label3.show()
        if "Gruppe 1 (<=20kVA). Klasse A. Quasi-Peak. 10m." in self.data:
            self.label4.show()
        if "Gruppe 1. Klasse B. Quasi-Peak. 3m." in self.data:
            self.label5.show()
        if "Gruppe 1. Klasse B. Quasi-Peak. 10m." in self.data:
            self.label6.show()


def color(hex):
    r = int(hex[1:3], 16)
    g = int(hex[3:5], 16)
    b = int(hex[5:7], 16)
    return r, g, b


if __name__ == "__main__":
    import sys

    # QtCore.QCoreApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling) # 用于自适应屏幕，在自己电脑上使用可能GUI太大，带上屏幕之后没有问题

    app = QtWidgets.QApplication(sys.argv)
    TestWindow = QtWidgets.QWidget()
    ui = Ui_TestWindow_FS()
    ui.setupUi(TestWindow)
    ui.drawSollSpannung()
    TestWindow.show()
    sys.exit(app.exec_())
